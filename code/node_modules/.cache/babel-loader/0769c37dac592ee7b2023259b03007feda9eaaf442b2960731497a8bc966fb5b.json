{"ast":null,"code":"var _jsxFileName = \"/Users/evewang/Desktop/Internship_prep/EviePortfolio/client/src/components/github.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Github() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [repos, setRepos] = useState([]);\n  const fetchUserData = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/repos');\n      //'https://api.github.com/users/EveWangUW/repos'\n      const data = await response.json();\n      setUsername(data[0].owner.login); // assuming all repos belong to the same user\n      setRepos(data); //TypeScript ensures type safety by enforcing that data conforms to the Repo type, which means data must contain only attributes that match the structure defined by Repo. Any additional attributes in data that are not specified in the Repo type will be ignored in terms of type checking.\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchUserData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"GitHub Repositories for \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: repos.slice(0, 5).map(repo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: repo.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Description: \", repo.description || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Main Language: \", repo.language || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Forks: \", repo.forks_count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Stars: \", repo.stargazers_count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Created At: \", repo.created_at]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Last Updated At: \", repo.updated_at]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, repo.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(Github, \"Y7nQ7aKqAYOvc5RqmWBz9Lyr5uE=\");\n_c = Github;\n;\nvar _c;\n$RefreshReg$(_c, \"Github\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Github","_s","username","setUsername","repos","setRepos","fetchUserData","response","fetch","data","json","owner","login","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","repo","name","description","language","forks_count","stargazers_count","created_at","updated_at","_c","$RefreshReg$"],"sources":["/Users/evewang/Desktop/Internship_prep/EviePortfolio/client/src/components/github.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\ntype Repo = {\n  name: string;\n  description: string | null;\n  language: string | null;\n  forks_count: number;\n  stargazers_count: number;\n  created_at: string;\n  updated_at: string;\n};\n\nexport default function Github() {\n  const [username, setUsername] = useState<string>('');\n  const [repos, setRepos] = useState<Repo[]>([]);\n\n  const fetchUserData = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/repos');\n      //'https://api.github.com/users/EveWangUW/repos'\n      const data = await response.json();\n      setUsername(data[0].owner.login); // assuming all repos belong to the same user\n      setRepos(data);//TypeScript ensures type safety by enforcing that data conforms to the Repo type, which means data must contain only attributes that match the structure defined by Repo. Any additional attributes in data that are not specified in the Repo type will be ignored in terms of type checking.\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchUserData();\n  }, []);\n\n  return (\n    <div>\n      <h1>GitHub Repositories for {username}</h1>\n      <ul>\n        {repos.slice(0, 5).map((repo) => (\n          <li key={repo.name}>\n            <h3>{repo.name}</h3>\n            <p>Description: {repo.description || 'N/A'}</p>\n            <p>Main Language: {repo.language || 'N/A'}</p>\n            <p>Forks: {repo.forks_count}</p>\n            <p>Stars: {repo.stargazers_count}</p>\n            <p>Created At: {repo.created_at}</p>\n            <p>Last Updated At: {repo.updated_at}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}