{"ast":null,"code":"// Returns the index of a defined shape\nexport function getSymbol(shape) {\n  const symbolNames = 'circle cross diamond square star triangle wye'.split(/ /);\n  return symbolNames.indexOf(shape) || 0;\n}\n/**\n * Transform mouse event position to corrdinates inside the SVG.\n * @param svg The SVG element\n * @param event The mouseEvent to transform\n */\nexport function getSVGPoint(svg, event) {\n  const pt = svg.createSVGPoint();\n  pt.x = event.clientX;\n  pt.y = event.clientY;\n  return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\n/**\n * Helper that converts values and percentages into values.\n * @param value The value provided by the developer. Can either be a number or a string with '%' or 'px'.\n * @param refValue The numerical value associated to 100%.\n * @returns The numerical value associated to the provided value.\n */\nexport function getPercentageValue(value, refValue) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  if (value === '100%') {\n    // Avoid potential rounding issues\n    return refValue;\n  }\n  if (value.endsWith('%')) {\n    const percentage = Number.parseFloat(value.slice(0, value.length - 1));\n    if (!Number.isNaN(percentage)) {\n      return percentage * refValue / 100;\n    }\n  }\n  if (value.endsWith('px')) {\n    const val = Number.parseFloat(value.slice(0, value.length - 2));\n    if (!Number.isNaN(val)) {\n      return val;\n    }\n  }\n  throw Error(`MUI-Charts: Received an unknown value \"${value}\". It should be a number, or a string with a percentage value.`);\n}\n\n/**\n * Remove spaces to have viable ids\n */\nexport function cleanId(id) {\n  return id.replace(' ', '_');\n}","map":{"version":3,"names":["getSymbol","shape","symbolNames","split","indexOf","getSVGPoint","svg","event","pt","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","getPercentageValue","value","refValue","endsWith","percentage","Number","parseFloat","slice","length","isNaN","val","Error","cleanId","id","replace"],"sources":["/Users/evewang/Desktop/Passion Project/GitHubVisualization/client/node_modules/@mui/x-charts/esm/internals/utils.js"],"sourcesContent":["// Returns the index of a defined shape\nexport function getSymbol(shape) {\n  const symbolNames = 'circle cross diamond square star triangle wye'.split(/ /);\n  return symbolNames.indexOf(shape) || 0;\n}\n/**\n * Transform mouse event position to corrdinates inside the SVG.\n * @param svg The SVG element\n * @param event The mouseEvent to transform\n */\nexport function getSVGPoint(svg, event) {\n  const pt = svg.createSVGPoint();\n  pt.x = event.clientX;\n  pt.y = event.clientY;\n  return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\n/**\n * Helper that converts values and percentages into values.\n * @param value The value provided by the developer. Can either be a number or a string with '%' or 'px'.\n * @param refValue The numerical value associated to 100%.\n * @returns The numerical value associated to the provided value.\n */\nexport function getPercentageValue(value, refValue) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  if (value === '100%') {\n    // Avoid potential rounding issues\n    return refValue;\n  }\n  if (value.endsWith('%')) {\n    const percentage = Number.parseFloat(value.slice(0, value.length - 1));\n    if (!Number.isNaN(percentage)) {\n      return percentage * refValue / 100;\n    }\n  }\n  if (value.endsWith('px')) {\n    const val = Number.parseFloat(value.slice(0, value.length - 2));\n    if (!Number.isNaN(val)) {\n      return val;\n    }\n  }\n  throw Error(`MUI-Charts: Received an unknown value \"${value}\". It should be a number, or a string with a percentage value.`);\n}\n\n/**\n * Remove spaces to have viable ids\n */\nexport function cleanId(id) {\n  return id.replace(' ', '_');\n}"],"mappings":"AAAA;AACA,OAAO,SAASA,SAASA,CAACC,KAAK,EAAE;EAC/B,MAAMC,WAAW,GAAG,+CAA+C,CAACC,KAAK,CAAC,GAAG,CAAC;EAC9E,OAAOD,WAAW,CAACE,OAAO,CAACH,KAAK,CAAC,IAAI,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAE;EACtC,MAAMC,EAAE,GAAGF,GAAG,CAACG,cAAc,CAAC,CAAC;EAC/BD,EAAE,CAACE,CAAC,GAAGH,KAAK,CAACI,OAAO;EACpBH,EAAE,CAACI,CAAC,GAAGL,KAAK,CAACM,OAAO;EACpB,OAAOL,EAAE,CAACM,eAAe,CAACR,GAAG,CAACS,YAAY,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAClD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EACA,IAAIA,KAAK,KAAK,MAAM,EAAE;IACpB;IACA,OAAOC,QAAQ;EACjB;EACA,IAAID,KAAK,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IACvB,MAAMC,UAAU,GAAGC,MAAM,CAACC,UAAU,CAACL,KAAK,CAACM,KAAK,CAAC,CAAC,EAAEN,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;IACtE,IAAI,CAACH,MAAM,CAACI,KAAK,CAACL,UAAU,CAAC,EAAE;MAC7B,OAAOA,UAAU,GAAGF,QAAQ,GAAG,GAAG;IACpC;EACF;EACA,IAAID,KAAK,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;IACxB,MAAMO,GAAG,GAAGL,MAAM,CAACC,UAAU,CAACL,KAAK,CAACM,KAAK,CAAC,CAAC,EAAEN,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;IAC/D,IAAI,CAACH,MAAM,CAACI,KAAK,CAACC,GAAG,CAAC,EAAE;MACtB,OAAOA,GAAG;IACZ;EACF;EACA,MAAMC,KAAK,CAAE,0CAAyCV,KAAM,gEAA+D,CAAC;AAC9H;;AAEA;AACA;AACA;AACA,OAAO,SAASW,OAAOA,CAACC,EAAE,EAAE;EAC1B,OAAOA,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}