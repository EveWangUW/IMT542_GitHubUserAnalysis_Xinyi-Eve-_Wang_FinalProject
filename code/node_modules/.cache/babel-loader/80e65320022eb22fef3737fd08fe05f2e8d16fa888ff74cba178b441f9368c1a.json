{"ast":null,"code":"// import React, { useState } from 'react';\n// import { ThemeProvider, createTheme } from '@mui/material/styles';\n// import Container from '@mui/material/Container';\n// import Paper from '@mui/material/Paper';\n// import Box from '@mui/material/Box';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import Typography from '@mui/material/Typography';\n// import Grid from '@mui/material/Grid';\n// import { fetchUserData, fetchPublicRepoData } from '../functions/api';\n// // import { calculateActiveLevel, calculateTimeOnGitHub, calculateUserValueToGitHub } from '../functions/calculations';\n// import UserInfo from './UserInfo';\n// import RepoList from './RepoList';\n// import { User, PubRepo } from '../types';\n// import GitHubRepos from './graphql';\n\n// const theme = createTheme({\n//   palette: {\n//     primary: {\n//       main: '#2196f3', // light blue\n//     },\n//     secondary: {\n//       main: '#f50057', // pink for secondary\n//     },\n//   },\n// });\n\n// export default function GitHub() {\n//   const [username, setUsername] = useState<string>('');\n//   const [user, setUser] = useState<User>({\n//     login: '',\n//     html_url: '',\n//     name: null,\n//     company: null,\n//     location: null,\n//     bio: null,\n//     public_repos: 0,\n//     followers: 0,\n//     following: 0,\n//     created_at: '',\n//     updated_at: '',\n//     email: '', \n//     hireable: null\n//   });\n//   const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n//   const [userDataJSON, setUserDataJSON] = useState<string>('');\n//   const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>('');\n\n//   const [timeOnGitHub, setTimeOnGitHub] = useState<string>('');\n//   const [activeLevel, setActiveLevel] = useState<string>('');\n//   const [userValueToGitHub, setUserValueToGitHub] = useState<{ category: string, value: number } | null>(null);\n\n//   //time of the user on github\n// const calculateTimeOnGitHub = (createdAt: string): string => {\n//   const currentDate = new Date();\n//   const createdDate = new Date(createdAt);\n//   const timeDiff = currentDate.getTime() - createdDate.getTime();\n//   const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//   return `${daysOnGitHub} days`;\n// };\n\n// //the active level of the user based on the last updated time and current time\n// const calculateActiveLevel = (updatedAt: string): string => {\n//   const currentDate = new Date();\n//   const updatedDate = new Date(updatedAt);\n//   const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//   const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//   if (daysSinceLastUpdate <= 30) {\n//     return \"Very Active\";\n//   } else if (daysSinceLastUpdate <= 90) {\n//     return \"Relatively Active\";\n//   } else if (daysSinceLastUpdate <= 365) {\n//     return \"Not Very Active\";\n//   } else {\n//     return \"Not Active\";\n//   }\n// };\n\n// //calcualte the user's programming skill level based on number of followers and number of public repos with different importance in weight\n// const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//   // Define weights for followers and public repos\n//   const weightFollowers = 0.6;\n//   const weightPublicRepos = 0.4;\n\n//   // Calculate the weighted value\n//   const userValue = (followers * weightFollowers) + (publicRepos * weightPublicRepos);\n\n//   // Define threshold for categories\n//   const thresholdGood = 100;\n\n//   let category = \"\";\n//   if (userValue < thresholdGood) {\n//     category = \"Relatively good user value\";\n//   } else if (userValue < 2 * thresholdGood) {\n//     category = \"Okay user value\";\n//   } else {\n//     category = \"Great user value\";\n//   }\n\n//   return { category, value: userValue };\n// };\n\n// const GenerateAnalysis = async () => {\n//     //fetch the user's info with the username\n//     if (username.trim() !== '') {\n\n//       //1.generate user analysis\n//       const dataUser = await fetchUserData(username);\n//       if (dataUser) {\n//         setUser(dataUser);\n//         setUserDataJSON(JSON.stringify(dataUser, null, 2));\n\n//         //retrieve the data fileds we need from the original raw json data\n//         const filteredUser = {\n//           login: dataUser.login,\n//           html_url: dataUser.html_url,\n//           name: dataUser.name,\n//           company: dataUser.company,\n//           location: dataUser.location,\n//           bio: dataUser.bio,\n//           public_repos: dataUser.public_repos,\n//           followers: dataUser.followers,\n//           following: dataUser.following,\n//           created_at: dataUser.created_at,\n//           updated_at: dataUser.updated_at,\n//           email: dataUser.email,\n//           hireable: dataUser.hireable\n//         };\n\n//         //provide input values for the data manipulation, and generate new data insights\n//         const additionalInfo = {\n//           timeOnGitHub: calculateTimeOnGitHub(dataUser.created_at),\n//           activeLevel: calculateActiveLevel(dataUser.updated_at),\n//           userValueToGitHub: calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos)\n//         };\n\n//         //update the state with the newly generated data\n//         setTimeOnGitHub(additionalInfo.timeOnGitHub);\n//         setActiveLevel(additionalInfo.activeLevel);\n//         setUserValueToGitHub(additionalInfo.userValueToGitHub);\n\n//         //combine the filtered data and the newly generated data\n//         const combinedInfo = {\n//           ...filteredUser,\n//           ...additionalInfo\n//         };\n\n//         //update the state for the new information structure\n//         setCombinedInfoJSON(JSON.stringify(combinedInfo, null, 2));\n//       }\n\n//       //2. generate user repo analysis\n//       const dataPublic = await fetchPublicRepoData(username);\n//       if (dataPublic) {\n//         setPublicrepos(dataPublic);\n\n//       }\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   //set the download button for the user info and the user repo info\n//   const downloadJSON = (json: string, filename: string) => {\n//     const blob = new Blob([json], { type: 'application/json' });\n//     const url = URL.createObjectURL(blob);\n//     const link = document.createElement('a');\n//     link.href = url;\n//     link.download = filename;\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n//     URL.revokeObjectURL(url);\n//   };\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Container maxWidth=\"md\">\n//         <Paper elevation={3} style={{ padding: '16px', marginTop: '16px' }}>\n//           <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n//             <GitHubRepos/>\n//             <Typography variant=\"h4\" gutterBottom>\n//               GitHub Repositories for {username || '...'}\n//             </Typography>\n//             <TextField\n//               label=\"Enter GitHub Username\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//             />\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={GenerateAnalysis}\n//                 >\n//                   Fetch user and repository information!\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={() => downloadJSON(userDataJSON, `${username}_data.json`)}\n//                   disabled={!userDataJSON}\n//                 >\n//                   Download User Data\n//                 </Button>\n//               </Grid>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"secondary\"\n//                   onClick={() => downloadJSON(JSON.stringify(publicrepos, null, 2), `${username}_repos.json`)}\n//                   disabled={publicrepos.length === 0}\n//                 >\n//                   Download Repositories Data\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Original Data User JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {userDataJSON}\n//               </pre>\n//             </Box>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Combined Info JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {combinedInfoJSON}\n//               </pre>\n//             </Box>\n//             <UserInfo user={user} timeOnGitHub={timeOnGitHub} activeLevel={activeLevel} userValueToGitHub={userValueToGitHub} />\n//             <RepoList publicrepos={publicrepos} />\n//           </Box>\n//         </Paper>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/evewang/Desktop/UW/spring/542a portal information structures/IMT542_GitHubUserAnalysis_Xinyi(Eve)_Wang/code/src/components/github.tsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import { ThemeProvider, createTheme } from '@mui/material/styles';\n// import Container from '@mui/material/Container';\n// import Paper from '@mui/material/Paper';\n// import Box from '@mui/material/Box';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import Typography from '@mui/material/Typography';\n// import Grid from '@mui/material/Grid';\n// import { fetchUserData, fetchPublicRepoData } from '../functions/api';\n// // import { calculateActiveLevel, calculateTimeOnGitHub, calculateUserValueToGitHub } from '../functions/calculations';\n// import UserInfo from './UserInfo';\n// import RepoList from './RepoList';\n// import { User, PubRepo } from '../types';\n// import GitHubRepos from './graphql';\n\n// const theme = createTheme({\n//   palette: {\n//     primary: {\n//       main: '#2196f3', // light blue\n//     },\n//     secondary: {\n//       main: '#f50057', // pink for secondary\n//     },\n//   },\n// });\n\n// export default function GitHub() {\n//   const [username, setUsername] = useState<string>('');\n//   const [user, setUser] = useState<User>({\n//     login: '',\n//     html_url: '',\n//     name: null,\n//     company: null,\n//     location: null,\n//     bio: null,\n//     public_repos: 0,\n//     followers: 0,\n//     following: 0,\n//     created_at: '',\n//     updated_at: '',\n//     email: '', \n//     hireable: null\n//   });\n//   const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n//   const [userDataJSON, setUserDataJSON] = useState<string>('');\n//   const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>('');\n\n//   const [timeOnGitHub, setTimeOnGitHub] = useState<string>('');\n//   const [activeLevel, setActiveLevel] = useState<string>('');\n//   const [userValueToGitHub, setUserValueToGitHub] = useState<{ category: string, value: number } | null>(null);\n\n//   //time of the user on github\n// const calculateTimeOnGitHub = (createdAt: string): string => {\n//   const currentDate = new Date();\n//   const createdDate = new Date(createdAt);\n//   const timeDiff = currentDate.getTime() - createdDate.getTime();\n//   const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//   return `${daysOnGitHub} days`;\n// };\n\n// //the active level of the user based on the last updated time and current time\n// const calculateActiveLevel = (updatedAt: string): string => {\n//   const currentDate = new Date();\n//   const updatedDate = new Date(updatedAt);\n//   const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//   const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//   if (daysSinceLastUpdate <= 30) {\n//     return \"Very Active\";\n//   } else if (daysSinceLastUpdate <= 90) {\n//     return \"Relatively Active\";\n//   } else if (daysSinceLastUpdate <= 365) {\n//     return \"Not Very Active\";\n//   } else {\n//     return \"Not Active\";\n//   }\n// };\n\n// //calcualte the user's programming skill level based on number of followers and number of public repos with different importance in weight\n// const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//   // Define weights for followers and public repos\n//   const weightFollowers = 0.6;\n//   const weightPublicRepos = 0.4;\n\n//   // Calculate the weighted value\n//   const userValue = (followers * weightFollowers) + (publicRepos * weightPublicRepos);\n\n//   // Define threshold for categories\n//   const thresholdGood = 100;\n\n//   let category = \"\";\n//   if (userValue < thresholdGood) {\n//     category = \"Relatively good user value\";\n//   } else if (userValue < 2 * thresholdGood) {\n//     category = \"Okay user value\";\n//   } else {\n//     category = \"Great user value\";\n//   }\n\n//   return { category, value: userValue };\n// };\n\n// const GenerateAnalysis = async () => {\n//     //fetch the user's info with the username\n//     if (username.trim() !== '') {\n\n//       //1.generate user analysis\n//       const dataUser = await fetchUserData(username);\n//       if (dataUser) {\n//         setUser(dataUser);\n//         setUserDataJSON(JSON.stringify(dataUser, null, 2));\n        \n//         //retrieve the data fileds we need from the original raw json data\n//         const filteredUser = {\n//           login: dataUser.login,\n//           html_url: dataUser.html_url,\n//           name: dataUser.name,\n//           company: dataUser.company,\n//           location: dataUser.location,\n//           bio: dataUser.bio,\n//           public_repos: dataUser.public_repos,\n//           followers: dataUser.followers,\n//           following: dataUser.following,\n//           created_at: dataUser.created_at,\n//           updated_at: dataUser.updated_at,\n//           email: dataUser.email,\n//           hireable: dataUser.hireable\n//         };\n\n//         //provide input values for the data manipulation, and generate new data insights\n//         const additionalInfo = {\n//           timeOnGitHub: calculateTimeOnGitHub(dataUser.created_at),\n//           activeLevel: calculateActiveLevel(dataUser.updated_at),\n//           userValueToGitHub: calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos)\n//         };\n\n//         //update the state with the newly generated data\n//         setTimeOnGitHub(additionalInfo.timeOnGitHub);\n//         setActiveLevel(additionalInfo.activeLevel);\n//         setUserValueToGitHub(additionalInfo.userValueToGitHub);\n\n//         //combine the filtered data and the newly generated data\n//         const combinedInfo = {\n//           ...filteredUser,\n//           ...additionalInfo\n//         };\n\n//         //update the state for the new information structure\n//         setCombinedInfoJSON(JSON.stringify(combinedInfo, null, 2));\n//       }\n\n//       //2. generate user repo analysis\n//       const dataPublic = await fetchPublicRepoData(username);\n//       if (dataPublic) {\n//         setPublicrepos(dataPublic);\n\n\n//       }\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   //set the download button for the user info and the user repo info\n//   const downloadJSON = (json: string, filename: string) => {\n//     const blob = new Blob([json], { type: 'application/json' });\n//     const url = URL.createObjectURL(blob);\n//     const link = document.createElement('a');\n//     link.href = url;\n//     link.download = filename;\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n//     URL.revokeObjectURL(url);\n//   };\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Container maxWidth=\"md\">\n//         <Paper elevation={3} style={{ padding: '16px', marginTop: '16px' }}>\n//           <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n//             <GitHubRepos/>\n//             <Typography variant=\"h4\" gutterBottom>\n//               GitHub Repositories for {username || '...'}\n//             </Typography>\n//             <TextField\n//               label=\"Enter GitHub Username\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//             />\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={GenerateAnalysis}\n//                 >\n//                   Fetch user and repository information!\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={() => downloadJSON(userDataJSON, `${username}_data.json`)}\n//                   disabled={!userDataJSON}\n//                 >\n//                   Download User Data\n//                 </Button>\n//               </Grid>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"secondary\"\n//                   onClick={() => downloadJSON(JSON.stringify(publicrepos, null, 2), `${username}_repos.json`)}\n//                   disabled={publicrepos.length === 0}\n//                 >\n//                   Download Repositories Data\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Original Data User JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {userDataJSON}\n//               </pre>\n//             </Box>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Combined Info JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {combinedInfoJSON}\n//               </pre>\n//             </Box>\n//             <UserInfo user={user} timeOnGitHub={timeOnGitHub} activeLevel={activeLevel} userValueToGitHub={userValueToGitHub} />\n//             <RepoList publicrepos={publicrepos} />\n//           </Box>\n//         </Paper>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// }\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}