{"ast":null,"code":"var _jsxFileName = \"/Users/evewang/Desktop/UW/spring/542a portal information structures/IMT542_GitHubUserAnalysis_Xinyi(Eve)_Wang/code/src/components/graphql.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// The GraphQL query\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst query = `\nquery GetUser($login: String!) {\n  user(login: $login) {\n    name\n    email\n    bio\n    createdAt\n    updatedAt\n    repositories(first: 5) {\n      nodes {\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}`;\n\n// The endpoint URL\nconst url = 'https://api.github.com/graphql';\nconst GraphQL = () => {\n  _s();\n  const [login, setLogin] = useState('');\n  const handleChange = event => {\n    setLogin(event.target.value);\n  };\n  const fetchRepositories = () => {\n    // The headers for the request\n    const headers = {\n      'Authorization': `Bearer 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`,\n      'Content-Type': 'application/json'\n    };\n\n    // The request payload\n    const payload = {\n      query: query,\n      variables: {\n        login: login\n      }\n    };\n\n    // Make the POST request\n    fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload)\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      // Trigger the download\n      downloadJSON(data, 'repositories_data.json');\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const downloadJSON = (json, filename) => {\n    const blob = new Blob([JSON.stringify(json, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" \\u2B07\\uFE0F Download user and repo information via GraphQL endpoint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: login,\n      onChange: handleChange,\n      placeholder: \"Enter GitHub username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchRepositories,\n      children: \"Fetch Repositories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphQL, \"zqm6SduR4YmjisSWmSahKrVECr8=\");\n_c = GraphQL;\nexport default GraphQL;\nvar _c;\n$RefreshReg$(_c, \"GraphQL\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","query","url","GraphQL","_s","login","setLogin","handleChange","event","target","value","fetchRepositories","headers","payload","variables","fetch","method","body","JSON","stringify","then","response","json","data","console","log","downloadJSON","catch","error","filename","blob","Blob","type","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/evewang/Desktop/UW/spring/542a portal information structures/IMT542_GitHubUserAnalysis_Xinyi(Eve)_Wang/code/src/components/graphql.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\n// The GraphQL query\nconst query = `\nquery GetUser($login: String!) {\n  user(login: $login) {\n    name\n    email\n    bio\n    createdAt\n    updatedAt\n    repositories(first: 5) {\n      nodes {\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}`;\n\n// The endpoint URL\nconst url = 'https://api.github.com/graphql';\n\nconst GraphQL: React.FC = () => {\n  const [login, setLogin] = useState('');\n  \n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLogin(event.target.value);\n  };\n\n  const fetchRepositories = () => {\n    // The headers for the request\n    const headers = {\n      'Authorization': `Bearer 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`,\n      'Content-Type': 'application/json'\n    };\n\n    // The request payload\n    const payload = {\n      query: query,\n      variables: { login: login }\n    };\n\n    // Make the POST request\n    fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload)\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        // Trigger the download\n        downloadJSON(data, 'repositories_data.json');\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  };\n\n  const downloadJSON = (json: object, filename: string) => {\n    const blob = new Blob([JSON.stringify(json, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div>\n      <h1> ⬇️ Download user and repo information via GraphQL endpoint</h1>\n      <input type=\"text\" value={login} onChange={handleChange} placeholder=\"Enter GitHub username\" />\n      <button onClick={fetchRepositories}>Fetch Repositories</button>\n    </div>\n  );\n};\n\nexport default GraphQL;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}