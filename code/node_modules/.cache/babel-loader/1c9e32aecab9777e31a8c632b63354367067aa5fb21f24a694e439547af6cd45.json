{"ast":null,"code":"//time of the user on github\nexport const calculateTimeOnGitHub = createdAt => {\n  const currentDate = new Date();\n  const createdDate = new Date(createdAt);\n  const timeDiff = currentDate.getTime() - createdDate.getTime();\n  const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n  return `${daysOnGitHub} days`;\n};\n\n//the active level of the user based on the last updated time and current time\nexport const calculateActiveLevel = updatedAt => {\n  const currentDate = new Date();\n  const updatedDate = new Date(updatedAt);\n  const timeDiff = currentDate.getTime() - updatedDate.getTime();\n  const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n  if (daysSinceLastUpdate <= 30) {\n    return \"Very Active\";\n  } else if (daysSinceLastUpdate <= 90) {\n    return \"Relatively Active\";\n  } else if (daysSinceLastUpdate <= 365) {\n    return \"Not Very Active\";\n  } else {\n    return \"Not Active\";\n  }\n};\n\n//calcualte the user's programming skill level based on \nexport const calculateUserValueToGitHub = (followers, publicRepos) => {\n  const userValue = followers + publicRepos;\n  const thresholdGood = 100;\n  let category = \"\";\n  if (userValue < thresholdGood) {\n    category = \"Relatively good user value\";\n  } else if (userValue < 2 * thresholdGood) {\n    category = \"Okay user value\";\n  } else {\n    category = \"Great user value\";\n  }\n  return {\n    category,\n    value: userValue\n  };\n};","map":{"version":3,"names":["calculateTimeOnGitHub","createdAt","currentDate","Date","createdDate","timeDiff","getTime","daysOnGitHub","Math","floor","calculateActiveLevel","updatedAt","updatedDate","daysSinceLastUpdate","calculateUserValueToGitHub","followers","publicRepos","userValue","thresholdGood","category","value"],"sources":["/Users/evewang/Desktop/UW/spring/542a portal information structures/IMT542_GitHubUserAnalysis_Xinyi(Eve)_Wang/code/src/functions/calculations.ts"],"sourcesContent":["//time of the user on github\nexport const calculateTimeOnGitHub = (createdAt: string): string => {\n  const currentDate = new Date();\n  const createdDate = new Date(createdAt);\n  const timeDiff = currentDate.getTime() - createdDate.getTime();\n  const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n  return `${daysOnGitHub} days`;\n};\n\n//the active level of the user based on the last updated time and current time\nexport const calculateActiveLevel = (updatedAt: string): string => {\n  const currentDate = new Date();\n  const updatedDate = new Date(updatedAt);\n  const timeDiff = currentDate.getTime() - updatedDate.getTime();\n  const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n  if (daysSinceLastUpdate <= 30) {\n    return \"Very Active\";\n  } else if (daysSinceLastUpdate <= 90) {\n    return \"Relatively Active\";\n  } else if (daysSinceLastUpdate <= 365) {\n    return \"Not Very Active\";\n  } else {\n    return \"Not Active\";\n  }\n};\n\n//calcualte the user's programming skill level based on \nexport const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n  const userValue = followers + publicRepos;\n  const thresholdGood = 100; \n\n  let category = \"\";\n  if (userValue < thresholdGood) {\n    category = \"Relatively good user value\";\n  } else if (userValue < 2 * thresholdGood) {\n    category = \"Okay user value\";\n  } else {\n    category = \"Great user value\";\n  }\n\n  return { category, value: userValue };\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,qBAAqB,GAAIC,SAAiB,IAAa;EAClE,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,MAAMC,WAAW,GAAG,IAAID,IAAI,CAACF,SAAS,CAAC;EACvC,MAAMI,QAAQ,GAAGH,WAAW,CAACI,OAAO,CAAC,CAAC,GAAGF,WAAW,CAACE,OAAO,CAAC,CAAC;EAC9D,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACJ,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;EAC9D,OAAQ,GAAEE,YAAa,OAAM;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMG,oBAAoB,GAAIC,SAAiB,IAAa;EACjE,MAAMT,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,MAAMS,WAAW,GAAG,IAAIT,IAAI,CAACQ,SAAS,CAAC;EACvC,MAAMN,QAAQ,GAAGH,WAAW,CAACI,OAAO,CAAC,CAAC,GAAGM,WAAW,CAACN,OAAO,CAAC,CAAC;EAC9D,MAAMO,mBAAmB,GAAGL,IAAI,CAACC,KAAK,CAACJ,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;EAErE,IAAIQ,mBAAmB,IAAI,EAAE,EAAE;IAC7B,OAAO,aAAa;EACtB,CAAC,MAAM,IAAIA,mBAAmB,IAAI,EAAE,EAAE;IACpC,OAAO,mBAAmB;EAC5B,CAAC,MAAM,IAAIA,mBAAmB,IAAI,GAAG,EAAE;IACrC,OAAO,iBAAiB;EAC1B,CAAC,MAAM;IACL,OAAO,YAAY;EACrB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,0BAA0B,GAAGA,CAACC,SAAiB,EAAEC,WAAmB,KAA0C;EACzH,MAAMC,SAAS,GAAGF,SAAS,GAAGC,WAAW;EACzC,MAAME,aAAa,GAAG,GAAG;EAEzB,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIF,SAAS,GAAGC,aAAa,EAAE;IAC7BC,QAAQ,GAAG,4BAA4B;EACzC,CAAC,MAAM,IAAIF,SAAS,GAAG,CAAC,GAAGC,aAAa,EAAE;IACxCC,QAAQ,GAAG,iBAAiB;EAC9B,CAAC,MAAM;IACLA,QAAQ,GAAG,kBAAkB;EAC/B;EAEA,OAAO;IAAEA,QAAQ;IAAEC,KAAK,EAAEH;EAAU,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}