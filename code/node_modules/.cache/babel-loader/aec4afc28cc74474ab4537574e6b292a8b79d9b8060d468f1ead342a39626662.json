{"ast":null,"code":"var _jsxFileName = \"/Users/evewang/Desktop/Programming/projects/Current_Passion_Project/GitHubVisualization/client/src/components/github.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import { User, PubRepo,PubPriRepo,Commit } from '../types';\n\n// export default function UserPublic() {\n//   const languageCounts: { [key: string]: number } = {};\n//   const [username, setUsername] = useState<string>('');\n//   const [reponame, setReponame] = useState<string>('');\n\n//   //set the state/the initial info of the public repos and the user\n//   const [user, setUser] = useState<User>({\n//     login: '',\n//     html_url: '',\n//     name: null,\n//     company: null,\n//     location: null,\n//     bio: null,\n//     public_repos: 0,\n//     followers: 0,\n//     following: 0,\n//     created_at: '',\n//     updated_at: '',\n//     email: '', \n//     hireable: null\n//   });\n//   const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n//   const [userDataJSON, setUserDataJSON] = useState<string>(''); // State for original dataUser JSON\n//   const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>(''); // State for combinedInfo JSON\n\n//   //make api calls to retrieve information about the user and the repo\n//   //1.first get request to get user data:\n//   const fetchUserData = async () => {\n//     try{\n//       const responseUser=await fetch (`https://api.github.com/users/${username}`);\n//       const dataUser=await responseUser.json();\n//       //consolo log the original data we retrieved from the api\n//       console.log(\"Original dataUser:\", dataUser); \n//       setUser(dataUser);//update the state with the new info\n//       setUserDataJSON(JSON.stringify(dataUser));\n\n//       //data manipulation so that the data become more portable and accessible to users:\n//       //1)get information we need from the api call result\n//       const filteredUser = {\n//         login: dataUser.login,\n//         html_url: dataUser.html_url,\n//         name: dataUser.name,\n//         company: dataUser.company,\n//         location: dataUser.location,\n//         bio: dataUser.bio,\n//         public_repos: dataUser.public_repos,\n//         followers: dataUser.followers,\n//         following: dataUser.following,\n//         created_at: dataUser.created_at,\n//         updated_at: dataUser.updated_at,\n//         email: dataUser.email,\n//         hireable: dataUser.hireable\n//       };\n\n//       //2.calcualte new fields based on the retrieved data\n//       const timeOnGitHub = calculateTimeOnGitHub(dataUser.created_at);\n//       const activeLevel = calculateActiveLevel(dataUser.updated_at);\n//       const userValueToGitHub = calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos);\n\n//       const additionalInfo = {\n//         timeOnGitHub: timeOnGitHub,\n//         activeLevel: activeLevel,\n//         userValueToGitHub: userValueToGitHub\n//       };\n//       //console.log the additionally calculated data\n//       console.log(\"Additional info:\", additionalInfo);\n\n//       //combine the filtered data with the additionally calculated data\n//       const combinedInfo = {\n//         ...filteredUser,\n//         ...additionalInfo\n//       };\n//       setCombinedInfoJSON(JSON.stringify(combinedInfo));\n\n//       //console.log the finished manipulated data for portability and accessibility\n//       console.log(\"Combined info:\", combinedInfo);\n//       return JSON.stringify(combinedInfo);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   //the calculation methods we used earlier:\n//   //1)Calculate time_on_github based on user's creation date till now\n//   const calculateTimeOnGitHub = (createdAt: string): string => {\n//     const currentDate = new Date();\n//     const createdDate = new Date(createdAt);\n//     const timeDiff = currentDate.getTime() - createdDate.getTime();\n//     const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//     return `${daysOnGitHub} days`;\n//   };\n\n//   //2)Calculate active_level based on last updated date\n//   const calculateActiveLevel = (updatedAt: string): string => {\n//     const currentDate = new Date();\n//     const updatedDate = new Date(updatedAt);\n//     const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//     const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//     if (daysSinceLastUpdate <= 30) {\n//       return \"Very Active\";\n//     } else if (daysSinceLastUpdate <= 90) {\n//       return \"Relatively Active\";\n//     } else if (daysSinceLastUpdate <= 365) {\n//       return \"Not Very Active\";\n//     } else {\n//       return \"Not Active\";\n//     }\n//   };\n\n//   //3)calcualte user value based on followers and number of public repos\n//   const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//     const userValue = followers + publicRepos;\n//     const thresholdGood = 100; \n\n//     let category = \"\";\n//     if (userValue < thresholdGood) {\n//       category = \"Relatively good user value\";\n//     } else if (userValue < 2 * thresholdGood) {\n//       category = \"Okay user value\";\n//     } else {\n//       category = \"Great user value\";\n//     }\n\n//     return { category, value: userValue };\n//   };\n\n//   //the second get request:\n//   //2. the public repos of a user (manipulation not added yet)\n//   const fetchPublicRepoData = async () => {\n//     try {\n//       const responsePublic = await fetch(`https://api.github.com/users/${username}/repos`);\n//       const dataPublic = await responsePublic.json();\n//       console.log(dataPublic);//console.log the original information\n//       setPublicrepos(dataPublic);//update the state with the new info\n\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   //button to retrieve data from the api\n//   const handleButtonClick = () => {\n//     if (username.trim() !== '') {\n//       fetchUserData();\n//       fetchPublicRepoData();\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   //display the information retrieved from the api\n//   return (\n//     <div>\n//       <h1>GitHub Repositories for {username}</h1>\n//       <TextField\n//         label=\"Enter GitHub Username\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <Button variant=\"contained\" onClick={handleButtonClick}>\n//         Fetch Repositories\n//       </Button>\n//       {/* <TextField\n//         label=\"Enter GitHub Reponame\"\n//         value={reponame}\n//         onChange={(e) => setReponame(e.target.value)}\n//       /> */}\n\n//       {/* Display original dataUser JSON */}\n//       <div>\n//         <h2>Original Data User JSON:</h2>\n//         <pre style={{ whiteSpace: 'pre-wrap' }}>{userDataJSON}</pre>\n//       </div>\n\n//       {/* Display combined info JSON (manipulated)*/}\n//       <div>\n//         <h2>Combined Info JSON:</h2>\n//         <pre style={{ whiteSpace: 'pre-wrap' }}>{combinedInfoJSON}</pre>\n//       </div>\n\n//       {/* display the user info (manipulation not added yet) */}\n//       <ul>\n//         <li>Login: {user.login}</li>\n//         <li>Name: {user.name || 'N/A'}</li>\n//         <li>Profile URL: <a href={user.html_url}>{user.html_url}</a></li>\n//         <li>Company: {user.company || 'N/A'}</li>\n//         <li>Location: {user.location || 'N/A'}</li>\n//         <li>Bio: {user.bio || 'N/A'}</li>\n//         <li>Public Repositories: {user.public_repos}</li>\n//         <li>Followers: {user.followers}</li>\n//         <li>Following: {user.following}</li>\n//         <li>Joined GitHub: {user.created_at}</li>\n//         <li>Last Updated: {user.updated_at}</li>\n//         <li>Email: {user.email || 'N/A'}</li>\n//         <li>Hireable: {user.hireable ? 'Yes' : 'No'}</li>\n//       </ul>\n\n//       {/* display public repos (manipulation not added yet) */}\n//       <ul>\n//       {publicrepos.slice(0, 5).map((publicrepo) => {\n//         return (\n//           <li key={publicrepo.name}>\n//             <h3>{publicrepo.name}</h3>\n//             <p>Full Name: {publicrepo.full_name}</p>\n//             <p>Private: {publicrepo.private.toString()}</p>\n//             <p>HTML URL: {publicrepo.html_url}</p>\n//             <p>Description: {publicrepo.description || 'N/A'}</p>\n//             <p>Fork: {publicrepo.fork.toString()}</p>\n//             <p>URL: {publicrepo.url}</p>\n//             <p>Created At: {publicrepo.created_at}</p>\n//             <p>Updated At: {publicrepo.updated_at}</p>\n//             <p>Pushed At: {publicrepo.pushed_at}</p>\n//             <p>Homepage: {publicrepo.homepage || 'N/A'}</p>\n//             <p>Size: {publicrepo.size}</p>\n//             <p>Stargazers Count: {publicrepo.stargazers_count}</p>\n//             <p>Watchers Count: {publicrepo.watchers_count}</p>\n//             <p>Language: {publicrepo.language || 'N/A'}</p>\n//             <p>Has Issues: {publicrepo.has_issues.toString()}</p>\n//             <p>Has Projects: {publicrepo.has_projects.toString()}</p>\n//             <p>Has Downloads: {publicrepo.has_downloads.toString()}</p>\n//             <p>Has Wiki: {publicrepo.has_wiki.toString()}</p>\n//             <p>Has Pages: {publicrepo.has_pages.toString()}</p>\n//             <p>Has Discussions: {publicrepo.has_discussions.toString()}</p>\n//             <p>Forks Count: {publicrepo.forks_count}</p>\n//             <p>Mirror URL: {publicrepo.mirror_url || 'N/A'}</p>\n//             <p>Archived: {publicrepo.archived.toString()}</p>\n//             <p>Disabled: {publicrepo.disabled.toString()}</p>\n//             <p>Open Issues Count: {publicrepo.open_issues_count}</p>\n//             <p>License: {publicrepo.license || 'N/A'}</p>\n//             <p>Web Commit Signoff Required: {publicrepo.web_commit_signoff_required.toString()}</p>\n//             <p>Topics: {publicrepo.topics.join(', ')}</p>\n//             <p>Visibility: {publicrepo.visibility}</p>\n//             <p>Forks: {publicrepo.forks}</p>\n//             <p>Open Issues: {publicrepo.open_issues}</p>\n//             <p>Watchers: {publicrepo.watchers}</p>\n//             <p>Default Branch: {publicrepo.default_branch}</p>\n//           </li>\n//         );\n//       })}\n//     </ul>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { Chart, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nexport default function UserPublic() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [user, setUser] = useState({\n    login: '',\n    html_url: '',\n    name: null,\n    company: null,\n    location: null,\n    bio: null,\n    public_repos: 0,\n    followers: 0,\n    following: 0,\n    created_at: '',\n    updated_at: '',\n    email: '',\n    hireable: null\n  });\n  const [publicrepos, setPublicrepos] = useState([]);\n  const [userDataJSON, setUserDataJSON] = useState('');\n  const [combinedInfoJSON, setCombinedInfoJSON] = useState('');\n  const chartRef = useRef(null);\n  const fetchUserData = async () => {\n    try {\n      const responseUser = await fetch(`https://api.github.com/users/${username}`);\n      const dataUser = await responseUser.json();\n      setUser(dataUser);\n      setUserDataJSON(JSON.stringify(dataUser));\n      const filteredUser = {\n        login: dataUser.login,\n        html_url: dataUser.html_url,\n        name: dataUser.name,\n        company: dataUser.company,\n        location: dataUser.location,\n        bio: dataUser.bio,\n        public_repos: dataUser.public_repos,\n        followers: dataUser.followers,\n        following: dataUser.following,\n        created_at: dataUser.created_at,\n        updated_at: dataUser.updated_at,\n        email: dataUser.email,\n        hireable: dataUser.hireable\n      };\n      const timeOnGitHub = calculateTimeOnGitHub(dataUser.created_at);\n      const activeLevel = calculateActiveLevel(dataUser.updated_at);\n      const userValueToGitHub = calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos);\n      const additionalInfo = {\n        timeOnGitHub: timeOnGitHub,\n        activeLevel: activeLevel,\n        userValueToGitHub: userValueToGitHub\n      };\n      const combinedInfo = {\n        ...filteredUser,\n        ...additionalInfo\n      };\n      setCombinedInfoJSON(JSON.stringify(combinedInfo));\n      return JSON.stringify(combinedInfo);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const fetchPublicRepoData = async () => {\n    try {\n      const responsePublic = await fetch(`https://api.github.com/users/${username}/repos`);\n      const dataPublic = await responsePublic.json();\n      setPublicrepos(dataPublic);\n      generateChart(dataPublic);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const handleButtonClick = () => {\n    if (username.trim() !== '') {\n      fetchUserData();\n      fetchPublicRepoData();\n    } else {\n      alert('Please enter a GitHub username.');\n    }\n  };\n  const calculateTimeOnGitHub = createdAt => {\n    const currentDate = new Date();\n    const createdDate = new Date(createdAt);\n    const timeDiff = currentDate.getTime() - createdDate.getTime();\n    const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n    return `${daysOnGitHub} days`;\n  };\n  const calculateActiveLevel = updatedAt => {\n    const currentDate = new Date();\n    const updatedDate = new Date(updatedAt);\n    const timeDiff = currentDate.getTime() - updatedDate.getTime();\n    const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n    if (daysSinceLastUpdate <= 30) {\n      return \"Very Active\";\n    } else if (daysSinceLastUpdate <= 90) {\n      return \"Relatively Active\";\n    } else if (daysSinceLastUpdate <= 365) {\n      return \"Not Very Active\";\n    } else {\n      return \"Not Active\";\n    }\n  };\n  const calculateUserValueToGitHub = (followers, publicRepos) => {\n    const userValue = followers + publicRepos;\n    const thresholdGood = 100;\n    let category = \"\";\n    if (userValue < thresholdGood) {\n      category = \"Relatively good user value\";\n    } else if (userValue < 2 * thresholdGood) {\n      category = \"Okay user value\";\n    } else {\n      category = \"Great user value\";\n    }\n    return {\n      category,\n      value: userValue\n    };\n  };\n  const generateChart = repos => {\n    const languageCounts = {};\n    repos.forEach(repo => {\n      const language = repo.language || 'Unknown';\n      if (languageCounts[language]) {\n        languageCounts[language]++;\n      } else {\n        languageCounts[language] = 1;\n      }\n    });\n    const chartData = {\n      labels: Object.keys(languageCounts),\n      datasets: [{\n        label: 'Number of Repositories',\n        data: Object.values(languageCounts),\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }]\n    };\n    const ctx = document.getElementById('myChart');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"GitHub Repositories for \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter GitHub Username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: handleButtonClick,\n      children: \"Fetch Repositories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Original Data User JSON:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: userDataJSON\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Combined Info JSON:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: combinedInfoJSON\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Login: \", user.login]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Name: \", user.name || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Profile URL: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: user.html_url,\n          children: user.html_url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Company: \", user.company || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Location: \", user.location || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Bio: \", user.bio || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Public Repositories: \", user.public_repos]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Followers: \", user.followers]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Following: \", user.following]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Joined GitHub: \", user.created_at]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Last Updated: \", user.updated_at]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Email: \", user.email || 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Hireable: \", user.hireable ? 'Yes' : 'No']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: publicrepos.slice(0, 5).map(publicrepo => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: publicrepo.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Full Name: \", publicrepo.full_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Private: \", publicrepo.private.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"HTML URL: \", publicrepo.html_url]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", publicrepo.description || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Fork: \", publicrepo.fork.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"URL: \", publicrepo.url]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Created At: \", publicrepo.created_at]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Updated At: \", publicrepo.updated_at]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Pushed At: \", publicrepo.pushed_at]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Homepage: \", publicrepo.homepage || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Size: \", publicrepo.size]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Stargazers Count: \", publicrepo.stargazers_count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Watchers Count: \", publicrepo.watchers_count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Language: \", publicrepo.language || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Has Issues: \", publicrepo.has_issues.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Has Projects: \", publicrepo.has_projects.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Has Downloads: \", publicrepo.has_downloads.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Has Wiki: \", publicrepo.has_wiki.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Has Pages: \", publicrepo.has_pages.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Has Discussions: \", publicrepo.has_discussions.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Forks Count: \", publicrepo.forks_count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Mirror URL: \", publicrepo.mirror_url || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Archived: \", publicrepo.archived.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Disabled: \", publicrepo.disabled.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Open Issues Count: \", publicrepo.open_issues_count]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"License: \", publicrepo.license || 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Web Commit Signoff Required: \", publicrepo.web_commit_signoff_required.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Topics: \", publicrepo.topics.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Visibility: \", publicrepo.visibility]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Forks: \", publicrepo.forks]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Open Issues: \", publicrepo.open_issues]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Watchers: \", publicrepo.watchers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Default Branch: \", publicrepo.default_branch]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }, this)]\n        }, publicrepo.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPublic, \"aPPFyp3jyMk79qu+QBwQIYO4XNw=\");\n_c = UserPublic;\nvar _c;\n$RefreshReg$(_c, \"UserPublic\");","map":{"version":3,"names":["React","useState","useRef","Button","TextField","Chart","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","UserPublic","_s","username","setUsername","user","setUser","login","html_url","name","company","location","bio","public_repos","followers","following","created_at","updated_at","email","hireable","publicrepos","setPublicrepos","userDataJSON","setUserDataJSON","combinedInfoJSON","setCombinedInfoJSON","chartRef","fetchUserData","responseUser","fetch","dataUser","json","JSON","stringify","filteredUser","timeOnGitHub","calculateTimeOnGitHub","activeLevel","calculateActiveLevel","userValueToGitHub","calculateUserValueToGitHub","additionalInfo","combinedInfo","error","console","fetchPublicRepoData","responsePublic","dataPublic","generateChart","handleButtonClick","trim","alert","createdAt","currentDate","Date","createdDate","timeDiff","getTime","daysOnGitHub","Math","floor","updatedAt","updatedDate","daysSinceLastUpdate","publicRepos","userValue","thresholdGood","category","value","repos","languageCounts","forEach","repo","language","chartData","labels","Object","keys","datasets","label","data","values","backgroundColor","borderColor","borderWidth","ctx","document","getElementById","current","destroy","type","options","responsive","scales","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","variant","onClick","style","whiteSpace","href","slice","map","publicrepo","full_name","private","toString","description","fork","url","pushed_at","homepage","size","stargazers_count","watchers_count","has_issues","has_projects","has_downloads","has_wiki","has_pages","has_discussions","forks_count","mirror_url","archived","disabled","open_issues_count","license","web_commit_signoff_required","topics","join","visibility","forks","open_issues","watchers","default_branch","id","width","height","_c","$RefreshReg$"],"sources":["/Users/evewang/Desktop/Programming/projects/Current_Passion_Project/GitHubVisualization/client/src/components/github.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import { User, PubRepo,PubPriRepo,Commit } from '../types';\n\n// export default function UserPublic() {\n//   const languageCounts: { [key: string]: number } = {};\n//   const [username, setUsername] = useState<string>('');\n//   const [reponame, setReponame] = useState<string>('');\n\n//   //set the state/the initial info of the public repos and the user\n//   const [user, setUser] = useState<User>({\n//     login: '',\n//     html_url: '',\n//     name: null,\n//     company: null,\n//     location: null,\n//     bio: null,\n//     public_repos: 0,\n//     followers: 0,\n//     following: 0,\n//     created_at: '',\n//     updated_at: '',\n//     email: '', \n//     hireable: null\n//   });\n//   const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n//   const [userDataJSON, setUserDataJSON] = useState<string>(''); // State for original dataUser JSON\n//   const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>(''); // State for combinedInfo JSON\n    \n\n//   //make api calls to retrieve information about the user and the repo\n//   //1.first get request to get user data:\n//   const fetchUserData = async () => {\n//     try{\n//       const responseUser=await fetch (`https://api.github.com/users/${username}`);\n//       const dataUser=await responseUser.json();\n//       //consolo log the original data we retrieved from the api\n//       console.log(\"Original dataUser:\", dataUser); \n//       setUser(dataUser);//update the state with the new info\n//       setUserDataJSON(JSON.stringify(dataUser));\n\n//       //data manipulation so that the data become more portable and accessible to users:\n//       //1)get information we need from the api call result\n//       const filteredUser = {\n//         login: dataUser.login,\n//         html_url: dataUser.html_url,\n//         name: dataUser.name,\n//         company: dataUser.company,\n//         location: dataUser.location,\n//         bio: dataUser.bio,\n//         public_repos: dataUser.public_repos,\n//         followers: dataUser.followers,\n//         following: dataUser.following,\n//         created_at: dataUser.created_at,\n//         updated_at: dataUser.updated_at,\n//         email: dataUser.email,\n//         hireable: dataUser.hireable\n//       };\n\n//       //2.calcualte new fields based on the retrieved data\n//       const timeOnGitHub = calculateTimeOnGitHub(dataUser.created_at);\n//       const activeLevel = calculateActiveLevel(dataUser.updated_at);\n//       const userValueToGitHub = calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos);\n\n//       const additionalInfo = {\n//         timeOnGitHub: timeOnGitHub,\n//         activeLevel: activeLevel,\n//         userValueToGitHub: userValueToGitHub\n//       };\n//       //console.log the additionally calculated data\n//       console.log(\"Additional info:\", additionalInfo);\n\n//       //combine the filtered data with the additionally calculated data\n//       const combinedInfo = {\n//         ...filteredUser,\n//         ...additionalInfo\n//       };\n//       setCombinedInfoJSON(JSON.stringify(combinedInfo));\n\n//       //console.log the finished manipulated data for portability and accessibility\n//       console.log(\"Combined info:\", combinedInfo);\n//       return JSON.stringify(combinedInfo);\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   //the calculation methods we used earlier:\n//   //1)Calculate time_on_github based on user's creation date till now\n//   const calculateTimeOnGitHub = (createdAt: string): string => {\n//     const currentDate = new Date();\n//     const createdDate = new Date(createdAt);\n//     const timeDiff = currentDate.getTime() - createdDate.getTime();\n//     const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//     return `${daysOnGitHub} days`;\n//   };\n\n//   //2)Calculate active_level based on last updated date\n//   const calculateActiveLevel = (updatedAt: string): string => {\n//     const currentDate = new Date();\n//     const updatedDate = new Date(updatedAt);\n//     const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//     const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n    \n//     if (daysSinceLastUpdate <= 30) {\n//       return \"Very Active\";\n//     } else if (daysSinceLastUpdate <= 90) {\n//       return \"Relatively Active\";\n//     } else if (daysSinceLastUpdate <= 365) {\n//       return \"Not Very Active\";\n//     } else {\n//       return \"Not Active\";\n//     }\n//   };\n\n//   //3)calcualte user value based on followers and number of public repos\n//   const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//     const userValue = followers + publicRepos;\n//     const thresholdGood = 100; \n  \n//     let category = \"\";\n//     if (userValue < thresholdGood) {\n//       category = \"Relatively good user value\";\n//     } else if (userValue < 2 * thresholdGood) {\n//       category = \"Okay user value\";\n//     } else {\n//       category = \"Great user value\";\n//     }\n  \n//     return { category, value: userValue };\n//   };\n\n//   //the second get request:\n//   //2. the public repos of a user (manipulation not added yet)\n//   const fetchPublicRepoData = async () => {\n//     try {\n//       const responsePublic = await fetch(`https://api.github.com/users/${username}/repos`);\n//       const dataPublic = await responsePublic.json();\n//       console.log(dataPublic);//console.log the original information\n//       setPublicrepos(dataPublic);//update the state with the new info\n\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   };\n\n//   //button to retrieve data from the api\n//   const handleButtonClick = () => {\n//     if (username.trim() !== '') {\n//       fetchUserData();\n//       fetchPublicRepoData();\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   //display the information retrieved from the api\n//   return (\n//     <div>\n//       <h1>GitHub Repositories for {username}</h1>\n//       <TextField\n//         label=\"Enter GitHub Username\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <Button variant=\"contained\" onClick={handleButtonClick}>\n//         Fetch Repositories\n//       </Button>\n//       {/* <TextField\n//         label=\"Enter GitHub Reponame\"\n//         value={reponame}\n//         onChange={(e) => setReponame(e.target.value)}\n//       /> */}\n\n//       {/* Display original dataUser JSON */}\n//       <div>\n//         <h2>Original Data User JSON:</h2>\n//         <pre style={{ whiteSpace: 'pre-wrap' }}>{userDataJSON}</pre>\n//       </div>\n\n//       {/* Display combined info JSON (manipulated)*/}\n//       <div>\n//         <h2>Combined Info JSON:</h2>\n//         <pre style={{ whiteSpace: 'pre-wrap' }}>{combinedInfoJSON}</pre>\n//       </div>\n      \n//       {/* display the user info (manipulation not added yet) */}\n//       <ul>\n//         <li>Login: {user.login}</li>\n//         <li>Name: {user.name || 'N/A'}</li>\n//         <li>Profile URL: <a href={user.html_url}>{user.html_url}</a></li>\n//         <li>Company: {user.company || 'N/A'}</li>\n//         <li>Location: {user.location || 'N/A'}</li>\n//         <li>Bio: {user.bio || 'N/A'}</li>\n//         <li>Public Repositories: {user.public_repos}</li>\n//         <li>Followers: {user.followers}</li>\n//         <li>Following: {user.following}</li>\n//         <li>Joined GitHub: {user.created_at}</li>\n//         <li>Last Updated: {user.updated_at}</li>\n//         <li>Email: {user.email || 'N/A'}</li>\n//         <li>Hireable: {user.hireable ? 'Yes' : 'No'}</li>\n//       </ul>\n\n//       {/* display public repos (manipulation not added yet) */}\n//       <ul>\n//       {publicrepos.slice(0, 5).map((publicrepo) => {\n//         return (\n//           <li key={publicrepo.name}>\n//             <h3>{publicrepo.name}</h3>\n//             <p>Full Name: {publicrepo.full_name}</p>\n//             <p>Private: {publicrepo.private.toString()}</p>\n//             <p>HTML URL: {publicrepo.html_url}</p>\n//             <p>Description: {publicrepo.description || 'N/A'}</p>\n//             <p>Fork: {publicrepo.fork.toString()}</p>\n//             <p>URL: {publicrepo.url}</p>\n//             <p>Created At: {publicrepo.created_at}</p>\n//             <p>Updated At: {publicrepo.updated_at}</p>\n//             <p>Pushed At: {publicrepo.pushed_at}</p>\n//             <p>Homepage: {publicrepo.homepage || 'N/A'}</p>\n//             <p>Size: {publicrepo.size}</p>\n//             <p>Stargazers Count: {publicrepo.stargazers_count}</p>\n//             <p>Watchers Count: {publicrepo.watchers_count}</p>\n//             <p>Language: {publicrepo.language || 'N/A'}</p>\n//             <p>Has Issues: {publicrepo.has_issues.toString()}</p>\n//             <p>Has Projects: {publicrepo.has_projects.toString()}</p>\n//             <p>Has Downloads: {publicrepo.has_downloads.toString()}</p>\n//             <p>Has Wiki: {publicrepo.has_wiki.toString()}</p>\n//             <p>Has Pages: {publicrepo.has_pages.toString()}</p>\n//             <p>Has Discussions: {publicrepo.has_discussions.toString()}</p>\n//             <p>Forks Count: {publicrepo.forks_count}</p>\n//             <p>Mirror URL: {publicrepo.mirror_url || 'N/A'}</p>\n//             <p>Archived: {publicrepo.archived.toString()}</p>\n//             <p>Disabled: {publicrepo.disabled.toString()}</p>\n//             <p>Open Issues Count: {publicrepo.open_issues_count}</p>\n//             <p>License: {publicrepo.license || 'N/A'}</p>\n//             <p>Web Commit Signoff Required: {publicrepo.web_commit_signoff_required.toString()}</p>\n//             <p>Topics: {publicrepo.topics.join(', ')}</p>\n//             <p>Visibility: {publicrepo.visibility}</p>\n//             <p>Forks: {publicrepo.forks}</p>\n//             <p>Open Issues: {publicrepo.open_issues}</p>\n//             <p>Watchers: {publicrepo.watchers}</p>\n//             <p>Default Branch: {publicrepo.default_branch}</p>\n//           </li>\n//         );\n//       })}\n//     </ul>\n//     </div>\n//   );\n// };\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { User, PubRepo } from '../types';\nimport { Chart, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\nChart.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\n\nexport default function UserPublic() {\n  const [username, setUsername] = useState<string>('');\n  const [user, setUser] = useState<User>({\n    login: '',\n    html_url: '',\n    name: null,\n    company: null,\n    location: null,\n    bio: null,\n    public_repos: 0,\n    followers: 0,\n    following: 0,\n    created_at: '',\n    updated_at: '',\n    email: '', \n    hireable: null\n  });\n  const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n  const [userDataJSON, setUserDataJSON] = useState<string>(''); \n  const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>('');\n  \n  const chartRef = useRef<Chart | null>(null);\n\n  const fetchUserData = async () => {\n    try {\n      const responseUser = await fetch(`https://api.github.com/users/${username}`);\n      const dataUser = await responseUser.json();\n      setUser(dataUser);\n      setUserDataJSON(JSON.stringify(dataUser));\n\n      const filteredUser = {\n        login: dataUser.login,\n        html_url: dataUser.html_url,\n        name: dataUser.name,\n        company: dataUser.company,\n        location: dataUser.location,\n        bio: dataUser.bio,\n        public_repos: dataUser.public_repos,\n        followers: dataUser.followers,\n        following: dataUser.following,\n        created_at: dataUser.created_at,\n        updated_at: dataUser.updated_at,\n        email: dataUser.email,\n        hireable: dataUser.hireable\n      };\n\n      const timeOnGitHub = calculateTimeOnGitHub(dataUser.created_at);\n      const activeLevel = calculateActiveLevel(dataUser.updated_at);\n      const userValueToGitHub = calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos);\n\n      const additionalInfo = {\n        timeOnGitHub: timeOnGitHub,\n        activeLevel: activeLevel,\n        userValueToGitHub: userValueToGitHub\n      };\n\n      const combinedInfo = {\n        ...filteredUser,\n        ...additionalInfo\n      };\n      setCombinedInfoJSON(JSON.stringify(combinedInfo));\n      return JSON.stringify(combinedInfo);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const fetchPublicRepoData = async () => {\n    try {\n      const responsePublic = await fetch(`https://api.github.com/users/${username}/repos`);\n      const dataPublic = await responsePublic.json();\n      setPublicrepos(dataPublic);\n      generateChart(dataPublic);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const handleButtonClick = () => {\n    if (username.trim() !== '') {\n      fetchUserData();\n      fetchPublicRepoData();\n    } else {\n      alert('Please enter a GitHub username.');\n    }\n  };\n\n  const calculateTimeOnGitHub = (createdAt: string): string => {\n    const currentDate = new Date();\n    const createdDate = new Date(createdAt);\n    const timeDiff = currentDate.getTime() - createdDate.getTime();\n    const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n    return `${daysOnGitHub} days`;\n  };\n\n  const calculateActiveLevel = (updatedAt: string): string => {\n    const currentDate = new Date();\n    const updatedDate = new Date(updatedAt);\n    const timeDiff = currentDate.getTime() - updatedDate.getTime();\n    const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n    \n    if (daysSinceLastUpdate <= 30) {\n      return \"Very Active\";\n    } else if (daysSinceLastUpdate <= 90) {\n      return \"Relatively Active\";\n    } else if (daysSinceLastUpdate <= 365) {\n      return \"Not Very Active\";\n    } else {\n      return \"Not Active\";\n    }\n  };\n\n  const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n    const userValue = followers + publicRepos;\n    const thresholdGood = 100; \n  \n    let category = \"\";\n    if (userValue < thresholdGood) {\n      category = \"Relatively good user value\";\n    } else if (userValue < 2 * thresholdGood) {\n      category = \"Okay user value\";\n    } else {\n      category = \"Great user value\";\n    }\n  \n    return { category, value: userValue };\n  };\n\n  const generateChart = (repos: PubRepo[]) => {\n    const languageCounts: { [key: string]: number } = {};\n    repos.forEach(repo => {\n      const language = repo.language || 'Unknown';\n      if (languageCounts[language]) {\n        languageCounts[language]++;\n      } else {\n        languageCounts[language] = 1;\n      }\n    });\n\n    const chartData = {\n      labels: Object.keys(languageCounts),\n      datasets: [{\n        label: 'Number of Repositories',\n        data: Object.values(languageCounts),\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }]\n    };\n\n    const ctx = document.getElementById('myChart') as HTMLCanvasElement;\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    chartRef.current = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n\n  return (\n    <div>\n      <h1>GitHub Repositories for {username}</h1>\n      <TextField\n        label=\"Enter GitHub Username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      <Button variant=\"contained\" onClick={handleButtonClick}>\n        Fetch Repositories\n      </Button>\n\n      <div>\n        <h2>Original Data User JSON:</h2>\n        <pre style={{ whiteSpace: 'pre-wrap' }}>{userDataJSON}</pre>\n      </div>\n\n      <div>\n        <h2>Combined Info JSON:</h2>\n        <pre style={{ whiteSpace: 'pre-wrap' }}>{combinedInfoJSON}</pre>\n      </div>\n      \n      <ul>\n        <li>Login: {user.login}</li>\n        <li>Name: {user.name || 'N/A'}</li>\n        <li>Profile URL: <a href={user.html_url}>{user.html_url}</a></li>\n        <li>Company: {user.company || 'N/A'}</li>\n        <li>Location: {user.location || 'N/A'}</li>\n        <li>Bio: {user.bio || 'N/A'}</li>\n        <li>Public Repositories: {user.public_repos}</li>\n        <li>Followers: {user.followers}</li>\n        <li>Following: {user.following}</li>\n        <li>Joined GitHub: {user.created_at}</li>\n        <li>Last Updated: {user.updated_at}</li>\n        <li>Email: {user.email || 'N/A'}</li>\n        <li>Hireable: {user.hireable ? 'Yes' : 'No'}</li>\n      </ul>\n\n      <ul>\n        {publicrepos.slice(0, 5).map((publicrepo) => {\n          return (\n            <li key={publicrepo.name}>\n              <h3>{publicrepo.name}</h3>\n              <p>Full Name: {publicrepo.full_name}</p>\n              <p>Private: {publicrepo.private.toString()}</p>\n              <p>HTML URL: {publicrepo.html_url}</p>\n              <p>Description: {publicrepo.description || 'N/A'}</p>\n              <p>Fork: {publicrepo.fork.toString()}</p>\n              <p>URL: {publicrepo.url}</p>\n              <p>Created At: {publicrepo.created_at}</p>\n              <p>Updated At: {publicrepo.updated_at}</p>\n              <p>Pushed At: {publicrepo.pushed_at}</p>\n              <p>Homepage: {publicrepo.homepage || 'N/A'}</p>\n              <p>Size: {publicrepo.size}</p>\n              <p>Stargazers Count: {publicrepo.stargazers_count}</p>\n              <p>Watchers Count: {publicrepo.watchers_count}</p>\n              <p>Language: {publicrepo.language || 'N/A'}</p>\n              <p>Has Issues: {publicrepo.has_issues.toString()}</p>\n              <p>Has Projects: {publicrepo.has_projects.toString()}</p>\n              <p>Has Downloads: {publicrepo.has_downloads.toString()}</p>\n              <p>Has Wiki: {publicrepo.has_wiki.toString()}</p>\n              <p>Has Pages: {publicrepo.has_pages.toString()}</p>\n              <p>Has Discussions: {publicrepo.has_discussions.toString()}</p>\n              <p>Forks Count: {publicrepo.forks_count}</p>\n              <p>Mirror URL: {publicrepo.mirror_url || 'N/A'}</p>\n              <p>Archived: {publicrepo.archived.toString()}</p>\n              <p>Disabled: {publicrepo.disabled.toString()}</p>\n              <p>Open Issues Count: {publicrepo.open_issues_count}</p>\n              <p>License: {publicrepo.license || 'N/A'}</p>\n              <p>Web Commit Signoff Required: {publicrepo.web_commit_signoff_required.toString()}</p>\n              <p>Topics: {publicrepo.topics.join(', ')}</p>\n              <p>Visibility: {publicrepo.visibility}</p>\n              <p>Forks: {publicrepo.forks}</p>\n              <p>Open Issues: {publicrepo.open_issues}</p>\n              <p>Watchers: {publicrepo.watchers}</p>\n              <p>Default Branch: {publicrepo.default_branch}</p>\n            </li>\n          );\n        })}\n      </ul>\n\n      <canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAeC,QAAQ,EAAEC,MAAM,QA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}