{"ast":null,"code":"var _jsxFileName = \"/Users/evewang/Desktop/Internship_prep/EviePortfolio/client/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport Github from './components/github';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Github, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n// import React, { useState } from 'react';\n\n// const UserRepos: React.FC = () => {\n//   const [username, setUsername] = useState('');\n//   const [repos, setRepos] = useState<string[]>([]);\n\n//   const fetchRepos = async (username: string) => {\n//     try {\n//       const response = await fetch(`http://localhost:8080/${username}/repos`);\n//       const data = await response.json();\n//       setRepos(data); // Assuming the response is an array of strings representing repo names\n//     } catch (error) {\n//       console.error('Error fetching repos:', error);\n//     }\n//   };\n\n//   const handleButtonClick = () => {\n//     if (username.trim() !== '') {\n//       fetchRepos(username);\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter GitHub username\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <button onClick={handleButtonClick}>Fetch Repositories</button>\n//       <ul>\n//         {repos.map((repo, index) => (\n//           <li key={index}>{repo}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default UserRepos;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Github","jsxDEV","_jsxDEV","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/evewang/Desktop/Internship_prep/EviePortfolio/client/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Button from '@mui/material/Button';\nimport Github from './components/github';\nfunction App() {\n\n  return (\n    <div>\n      <Github/>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState } from 'react';\n\n// const UserRepos: React.FC = () => {\n//   const [username, setUsername] = useState('');\n//   const [repos, setRepos] = useState<string[]>([]);\n\n//   const fetchRepos = async (username: string) => {\n//     try {\n//       const response = await fetch(`http://localhost:8080/${username}/repos`);\n//       const data = await response.json();\n//       setRepos(data); // Assuming the response is an array of strings representing repo names\n//     } catch (error) {\n//       console.error('Error fetching repos:', error);\n//     }\n//   };\n\n//   const handleButtonClick = () => {\n//     if (username.trim() !== '') {\n//       fetchRepos(username);\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter GitHub username\"\n//         value={username}\n//         onChange={(e) => setUsername(e.target.value)}\n//       />\n//       <button onClick={handleButtonClick}>Fetch Repositories</button>\n//       <ul>\n//         {repos.map((repo, index) => (\n//           <li key={index}>{repo}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default UserRepos;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAoB,OAAO;AACvC,OAAO,WAAW;AAElB,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzC,SAASC,GAAGA,CAAA,EAAG;EAEb,oBACED,OAAA;IAAAE,QAAA,eACEF,OAAA,CAACF,MAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEV;AAACC,EAAA,GARQN,GAAG;AAUZ,eAAeA,GAAG;;AAElB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}