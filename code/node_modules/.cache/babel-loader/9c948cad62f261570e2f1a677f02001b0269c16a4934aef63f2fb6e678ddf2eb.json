{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { SvgContext } from '../context/DrawingProvider';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { SeriesContext } from '../context/SeriesContextProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction ChartsOnAxisClickHandler(props) {\n  const {\n    onAxisClick\n  } = props;\n  const svgRef = React.useContext(SvgContext);\n  const series = React.useContext(SeriesContext);\n  const {\n    axis\n  } = React.useContext(InteractionContext);\n  const {\n    xAxisIds,\n    xAxis,\n    yAxisIds,\n    yAxis\n  } = React.useContext(CartesianContext);\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || !onAxisClick) {\n      return () => {};\n    }\n    const handleMouseClick = event => {\n      event.preventDefault();\n      const isXaxis = (axis.x && axis.x.index) !== undefined;\n      const USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];\n      const dataIndex = isXaxis ? axis.x && axis.x.index : axis.y && axis.y.index;\n      if (dataIndex == null) {\n        return;\n      }\n      const seriesValues = {};\n      Object.keys(series).filter(seriesType => ['bar', 'line'].includes(seriesType)).forEach(seriesType => {\n        series[seriesType]?.seriesOrder.forEach(seriesId => {\n          const seriesItem = series[seriesType].series[seriesId];\n          const axisKey = isXaxis ? seriesItem.xAxisKey : seriesItem.yAxisKey;\n          if (axisKey === undefined || axisKey === USED_AXIS_ID) {\n            seriesValues[seriesId] = seriesItem.data[dataIndex];\n          }\n        });\n      });\n      const axisValue = (isXaxis ? xAxis : yAxis)[USED_AXIS_ID].data?.[dataIndex];\n      onAxisClick(event, {\n        dataIndex,\n        axisValue,\n        seriesValues\n      });\n    };\n    element.addEventListener('click', handleMouseClick);\n    return () => {\n      element.removeEventListener('click', handleMouseClick);\n    };\n  }, [axis.x, axis.y, onAxisClick, series, svgRef, xAxis, xAxisIds, yAxis, yAxisIds]);\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/_jsx(React.Fragment, {});\n}\nprocess.env.NODE_ENV !== \"production\" ? ChartsOnAxisClickHandler.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The function called for onClick events.\n   * The second argument contains information about all line/bar elements at the current mouse position.\n   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.\n   * @param {null | AxisData} data The data about the clicked axis and items associated with it.\n   */\n  onAxisClick: PropTypes.func\n} : void 0;\nexport { ChartsOnAxisClickHandler };","map":{"version":3,"names":["React","PropTypes","SvgContext","InteractionContext","CartesianContext","SeriesContext","jsx","_jsx","ChartsOnAxisClickHandler","props","onAxisClick","svgRef","useContext","series","axis","xAxisIds","xAxis","yAxisIds","yAxis","useEffect","element","current","handleMouseClick","event","preventDefault","isXaxis","x","index","undefined","USED_AXIS_ID","dataIndex","y","seriesValues","Object","keys","filter","seriesType","includes","forEach","seriesOrder","seriesId","seriesItem","axisKey","xAxisKey","yAxisKey","data","axisValue","addEventListener","removeEventListener","Fragment","process","env","NODE_ENV","propTypes","func"],"sources":["/Users/evewang/Desktop/Programming/projects/Current_Passion_Project/GitHubVisualization/client/node_modules/@mui/x-charts/esm/ChartsOnAxisClickHandler/ChartsOnAxisClickHandler.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { SvgContext } from '../context/DrawingProvider';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { SeriesContext } from '../context/SeriesContextProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction ChartsOnAxisClickHandler(props) {\n  const {\n    onAxisClick\n  } = props;\n  const svgRef = React.useContext(SvgContext);\n  const series = React.useContext(SeriesContext);\n  const {\n    axis\n  } = React.useContext(InteractionContext);\n  const {\n    xAxisIds,\n    xAxis,\n    yAxisIds,\n    yAxis\n  } = React.useContext(CartesianContext);\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || !onAxisClick) {\n      return () => {};\n    }\n    const handleMouseClick = event => {\n      event.preventDefault();\n      const isXaxis = (axis.x && axis.x.index) !== undefined;\n      const USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];\n      const dataIndex = isXaxis ? axis.x && axis.x.index : axis.y && axis.y.index;\n      if (dataIndex == null) {\n        return;\n      }\n      const seriesValues = {};\n      Object.keys(series).filter(seriesType => ['bar', 'line'].includes(seriesType)).forEach(seriesType => {\n        series[seriesType]?.seriesOrder.forEach(seriesId => {\n          const seriesItem = series[seriesType].series[seriesId];\n          const axisKey = isXaxis ? seriesItem.xAxisKey : seriesItem.yAxisKey;\n          if (axisKey === undefined || axisKey === USED_AXIS_ID) {\n            seriesValues[seriesId] = seriesItem.data[dataIndex];\n          }\n        });\n      });\n      const axisValue = (isXaxis ? xAxis : yAxis)[USED_AXIS_ID].data?.[dataIndex];\n      onAxisClick(event, {\n        dataIndex,\n        axisValue,\n        seriesValues\n      });\n    };\n    element.addEventListener('click', handleMouseClick);\n    return () => {\n      element.removeEventListener('click', handleMouseClick);\n    };\n  }, [axis.x, axis.y, onAxisClick, series, svgRef, xAxis, xAxisIds, yAxis, yAxisIds]);\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/_jsx(React.Fragment, {});\n}\nprocess.env.NODE_ENV !== \"production\" ? ChartsOnAxisClickHandler.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The function called for onClick events.\n   * The second argument contains information about all line/bar elements at the current mouse position.\n   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.\n   * @param {null | AxisData} data The data about the clicked axis and items associated with it.\n   */\n  onAxisClick: PropTypes.func\n} : void 0;\nexport { ChartsOnAxisClickHandler };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}