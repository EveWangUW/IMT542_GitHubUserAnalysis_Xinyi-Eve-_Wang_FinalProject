{"ast":null,"code":"var _jsxFileName = \"/Users/evewang/Desktop/Internship_prep/EviePortfolio/client/src/App.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './App.css';\n// import Button from '@mui/material/Button';\n// import Github from './components/github';\n// function App() {\n\n//   return (\n//     <div>\n//       <Github/>\n\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserRepos = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [repos, setRepos] = useState([]);\n  const fetchRepos = async username => {\n    try {\n      const response = await fetch(`http://localhost:8080/${username}/repos`);\n      const data = await response.json();\n      setRepos(data); // Assuming the response is an array of strings representing repo names\n    } catch (error) {\n      console.error('Error fetching repos:', error);\n    }\n  };\n  const handleButtonClick = () => {\n    if (username.trim() !== '') {\n      fetchRepos(username);\n    } else {\n      alert('Please enter a GitHub username.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter GitHub username\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: \"Fetch Repositories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: repos.map((repo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: repo\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(UserRepos, \"GLcn+RU5YNL1WVImukTpGmG02h8=\");\n_c = UserRepos;\nexport default UserRepos;\nvar _c;\n$RefreshReg$(_c, \"UserRepos\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UserRepos","_s","username","setUsername","repos","setRepos","fetchRepos","response","fetch","data","json","error","console","handleButtonClick","trim","alert","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","repo","index","_c","$RefreshReg$"],"sources":["/Users/evewang/Desktop/Internship_prep/EviePortfolio/client/src/App.tsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import './App.css';\n// import Button from '@mui/material/Button';\n// import Github from './components/github';\n// function App() {\n\n//   return (\n//     <div>\n//       <Github/>\n      \n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\n\nconst UserRepos: React.FC = () => {\n  const [username, setUsername] = useState('');\n  const [repos, setRepos] = useState<string[]>([]);\n\n  const fetchRepos = async (username: string) => {\n    try {\n      const response = await fetch(`http://localhost:8080/${username}/repos`);\n      const data = await response.json();\n      setRepos(data); // Assuming the response is an array of strings representing repo names\n    } catch (error) {\n      console.error('Error fetching repos:', error);\n    }\n  };\n\n  const handleButtonClick = () => {\n    if (username.trim() !== '') {\n      fetchRepos(username);\n    } else {\n      alert('Please enter a GitHub username.');\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Enter GitHub username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      <button onClick={handleButtonClick}>Fetch Repositories</button>\n      <ul>\n        {repos.map((repo, index) => (\n          <li key={index}>{repo}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default UserRepos;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAW,EAAE,CAAC;EAEhD,MAAMS,UAAU,GAAG,MAAOJ,QAAgB,IAAK;IAC7C,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,yBAAwBN,QAAS,QAAO,CAAC;MACvE,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIX,QAAQ,CAACY,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1BR,UAAU,CAACJ,QAAQ,CAAC;IACtB,CAAC,MAAM;MACLa,KAAK,CAAC,iCAAiC,CAAC;IAC1C;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,uBAAuB;MACnCC,KAAK,EAAEjB,QAAS;MAChBkB,QAAQ,EAAGC,CAAC,IAAKlB,WAAW,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACF3B,OAAA;MAAQ4B,OAAO,EAAEd,iBAAkB;MAAAG,QAAA,EAAC;IAAkB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/D3B,OAAA;MAAAiB,QAAA,EACGZ,KAAK,CAACwB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrB/B,OAAA;QAAAiB,QAAA,EAAiBa;MAAI,GAAZC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACzB,EAAA,CAtCID,SAAmB;AAAA+B,EAAA,GAAnB/B,SAAmB;AAwCzB,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}