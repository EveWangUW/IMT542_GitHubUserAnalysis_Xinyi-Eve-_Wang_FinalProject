{"ast":null,"code":"var _jsxFileName = \"/Users/evewang/Desktop/UW/spring/542a portal information structures/IMT542_GitHubUserAnalysis_Xinyi(Eve)_Wang/code/src/components/github.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { ThemeProvider, createTheme } from '@mui/material/styles';\n// import Container from '@mui/material/Container';\n// import Paper from '@mui/material/Paper';\n// import Box from '@mui/material/Box';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import Typography from '@mui/material/Typography';\n// import Grid from '@mui/material/Grid';\n// import { fetchUserData, fetchPublicRepoData } from '../functions/api';\n// // import { calculateActiveLevel, calculateTimeOnGitHub, calculateUserValueToGitHub } from '../functions/calculations';\n// import UserInfo from './UserInfo';\n// import RepoList from './RepoList';\n// import { User, PubRepo } from '../types';\n// import GitHubRepos from './graphql';\n\n// const theme = createTheme({\n//   palette: {\n//     primary: {\n//       main: '#2196f3', // light blue\n//     },\n//     secondary: {\n//       main: '#f50057', // pink for secondary\n//     },\n//   },\n// });\n\n// export default function GitHub() {\n//   const [username, setUsername] = useState<string>('');\n//   const [user, setUser] = useState<User>({\n//     login: '',\n//     html_url: '',\n//     name: null,\n//     company: null,\n//     location: null,\n//     bio: null,\n//     public_repos: 0,\n//     followers: 0,\n//     following: 0,\n//     created_at: '',\n//     updated_at: '',\n//     email: '', \n//     hireable: null\n//   });\n//   const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n//   const [userDataJSON, setUserDataJSON] = useState<string>('');\n//   const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>('');\n\n//   const [timeOnGitHub, setTimeOnGitHub] = useState<string>('');\n//   const [activeLevel, setActiveLevel] = useState<string>('');\n//   const [userValueToGitHub, setUserValueToGitHub] = useState<{ category: string, value: number } | null>(null);\n\n//   //time of the user on github\n// const calculateTimeOnGitHub = (createdAt: string): string => {\n//   const currentDate = new Date();\n//   const createdDate = new Date(createdAt);\n//   const timeDiff = currentDate.getTime() - createdDate.getTime();\n//   const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//   return `${daysOnGitHub} days`;\n// };\n\n// //the active level of the user based on the last updated time and current time\n// const calculateActiveLevel = (updatedAt: string): string => {\n//   const currentDate = new Date();\n//   const updatedDate = new Date(updatedAt);\n//   const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//   const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//   if (daysSinceLastUpdate <= 30) {\n//     return \"Very Active\";\n//   } else if (daysSinceLastUpdate <= 90) {\n//     return \"Relatively Active\";\n//   } else if (daysSinceLastUpdate <= 365) {\n//     return \"Not Very Active\";\n//   } else {\n//     return \"Not Active\";\n//   }\n// };\n\n// //calcualte the user's programming skill level based on number of followers and number of public repos with different importance in weight\n// const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//   // Define weights for followers and public repos\n//   const weightFollowers = 0.6;\n//   const weightPublicRepos = 0.4;\n\n//   // Calculate the weighted value\n//   const userValue = (followers * weightFollowers) + (publicRepos * weightPublicRepos);\n\n//   // Define threshold for categories\n//   const thresholdGood = 100;\n\n//   let category = \"\";\n//   if (userValue < thresholdGood) {\n//     category = \"Relatively good user value\";\n//   } else if (userValue < 2 * thresholdGood) {\n//     category = \"Okay user value\";\n//   } else {\n//     category = \"Great user value\";\n//   }\n\n//   return { category, value: userValue };\n// };\n\n// const GenerateAnalysis = async () => {\n//     //fetch the user's info with the username\n//     if (username.trim() !== '') {\n\n//       //1.generate user analysis\n//       const dataUser = await fetchUserData(username);\n//       if (dataUser) {\n//         setUser(dataUser);\n//         setUserDataJSON(JSON.stringify(dataUser, null, 2));\n\n//         //retrieve the data fileds we need from the original raw json data\n//         const filteredUser = {\n//           login: dataUser.login,\n//           html_url: dataUser.html_url,\n//           name: dataUser.name,\n//           company: dataUser.company,\n//           location: dataUser.location,\n//           bio: dataUser.bio,\n//           public_repos: dataUser.public_repos,\n//           followers: dataUser.followers,\n//           following: dataUser.following,\n//           created_at: dataUser.created_at,\n//           updated_at: dataUser.updated_at,\n//           email: dataUser.email,\n//           hireable: dataUser.hireable\n//         };\n\n//         //provide input values for the data manipulation, and generate new data insights\n//         const additionalInfo = {\n//           timeOnGitHub: calculateTimeOnGitHub(dataUser.created_at),\n//           activeLevel: calculateActiveLevel(dataUser.updated_at),\n//           userValueToGitHub: calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos)\n//         };\n\n//         //update the state with the newly generated data\n//         setTimeOnGitHub(additionalInfo.timeOnGitHub);\n//         setActiveLevel(additionalInfo.activeLevel);\n//         setUserValueToGitHub(additionalInfo.userValueToGitHub);\n\n//         //combine the filtered data and the newly generated data\n//         const combinedInfo = {\n//           ...filteredUser,\n//           ...additionalInfo\n//         };\n\n//         //update the state for the new information structure\n//         setCombinedInfoJSON(JSON.stringify(combinedInfo, null, 2));\n//       }\n\n//       //2. generate user repo analysis\n//       const dataPublic = await fetchPublicRepoData(username);\n//       if (dataPublic) {\n//         setPublicrepos(dataPublic);\n\n//       }\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   //set the download button for the user info and the user repo info\n//   const downloadJSON = (json: string, filename: string) => {\n//     const blob = new Blob([json], { type: 'application/json' });\n//     const url = URL.createObjectURL(blob);\n//     const link = document.createElement('a');\n//     link.href = url;\n//     link.download = filename;\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n//     URL.revokeObjectURL(url);\n//   };\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Container maxWidth=\"md\">\n//         <Paper elevation={3} style={{ padding: '16px', marginTop: '16px' }}>\n//           <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n//             <GitHubRepos/>\n//             <Typography variant=\"h4\" gutterBottom>\n//               GitHub Repositories for {username || '...'}\n//             </Typography>\n//             <TextField\n//               label=\"Enter GitHub Username\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//             />\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={GenerateAnalysis}\n//                 >\n//                   Fetch user and repository information!\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={() => downloadJSON(userDataJSON, `${username}_data.json`)}\n//                   disabled={!userDataJSON}\n//                 >\n//                   Download User Data\n//                 </Button>\n//               </Grid>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"secondary\"\n//                   onClick={() => downloadJSON(JSON.stringify(publicrepos, null, 2), `${username}_repos.json`)}\n//                   disabled={publicrepos.length === 0}\n//                 >\n//                   Download Repositories Data\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Original Data User JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {userDataJSON}\n//               </pre>\n//             </Box>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Combined Info JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {combinedInfoJSON}\n//               </pre>\n//             </Box>\n//             <UserInfo user={user} timeOnGitHub={timeOnGitHub} activeLevel={activeLevel} userValueToGitHub={userValueToGitHub} />\n//             <RepoList publicrepos={publicrepos} />\n//           </Box>\n//         </Paper>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// }\n\nimport React, { useState } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { fetchUserData, fetchPublicRepoData } from '../functions/api';\nimport UserInfo from './UserInfo';\nimport RepoList from './RepoList';\nimport GitHubRepos from './graphql';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#2196f3' // light blue\n    },\n    secondary: {\n      main: '#f50057' // pink for secondary\n    }\n  }\n});\nexport default function GitHub() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [user, setUser] = useState({\n    login: '',\n    html_url: '',\n    name: null,\n    company: null,\n    location: null,\n    bio: null,\n    public_repos: 0,\n    followers: 0,\n    following: 0,\n    created_at: '',\n    updated_at: '',\n    email: '',\n    hireable: null\n  });\n  const [publicrepos, setPublicrepos] = useState([]);\n  const [userDataJSON, setUserDataJSON] = useState('');\n  const [combinedInfoJSON, setCombinedInfoJSON] = useState('');\n  const [timeOnGitHub, setTimeOnGitHub] = useState('');\n  const [activeLevel, setActiveLevel] = useState('');\n  const [userValueToGitHub, setUserValueToGitHub] = useState(null);\n  const [mostUsedLanguage, setMostUsedLanguage] = useState('');\n  const calculateTimeOnGitHub = createdAt => {\n    const currentDate = new Date();\n    const createdDate = new Date(createdAt);\n    const timeDiff = currentDate.getTime() - createdDate.getTime();\n    const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n    return `${daysOnGitHub} days`;\n  };\n  const calculateActiveLevel = updatedAt => {\n    const currentDate = new Date();\n    const updatedDate = new Date(updatedAt);\n    const timeDiff = currentDate.getTime() - updatedDate.getTime();\n    const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n    if (daysSinceLastUpdate <= 30) {\n      return \"Very Active\";\n    } else if (daysSinceLastUpdate <= 90) {\n      return \"Relatively Active\";\n    } else if (daysSinceLastUpdate <= 365) {\n      return \"Not Very Active\";\n    } else {\n      return \"Not Active\";\n    }\n  };\n  const calculateUserValueToGitHub = (followers, publicRepos) => {\n    const weightFollowers = 0.6;\n    const weightPublicRepos = 0.4;\n    const userValue = followers * weightFollowers + publicRepos * weightPublicRepos;\n    const thresholdGood = 100;\n    let category = \"\";\n    if (userValue < thresholdGood) {\n      category = \"Relatively good user value\";\n    } else if (userValue < 2 * thresholdGood) {\n      category = \"Okay user value\";\n    } else {\n      category = \"Great user value\";\n    }\n    return {\n      category,\n      value: userValue\n    };\n  };\n  const GenerateAnalysis = async () => {\n    if (username.trim() !== '') {\n      const dataUser = await fetchUserData(username);\n      if (dataUser) {\n        setUser(dataUser);\n        setUserDataJSON(JSON.stringify(dataUser, null, 2));\n        const filteredUser = {\n          login: dataUser.login,\n          html_url: dataUser.html_url,\n          name: dataUser.name,\n          company: dataUser.company,\n          location: dataUser.location,\n          bio: dataUser.bio,\n          public_repos: dataUser.public_repos,\n          followers: dataUser.followers,\n          following: dataUser.following,\n          created_at: dataUser.created_at,\n          updated_at: dataUser.updated_at,\n          email: dataUser.email,\n          hireable: dataUser.hireable\n        };\n        const additionalInfo = {\n          timeOnGitHub: calculateTimeOnGitHub(dataUser.created_at),\n          activeLevel: calculateActiveLevel(dataUser.updated_at),\n          userValueToGitHub: calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos)\n        };\n        setTimeOnGitHub(additionalInfo.timeOnGitHub);\n        setActiveLevel(additionalInfo.activeLevel);\n        setUserValueToGitHub(additionalInfo.userValueToGitHub);\n        const combinedInfo = {\n          ...filteredUser,\n          ...additionalInfo\n        };\n        setCombinedInfoJSON(JSON.stringify(combinedInfo, null, 2));\n      }\n      const dataPublic = await fetchPublicRepoData(username);\n      if (dataPublic) {\n        setPublicrepos(dataPublic);\n\n        // Analyze the most frequently used language\n        const languageCount = {};\n        dataPublic.forEach(repo => {\n          if (repo.language) {\n            if (languageCount[repo.language]) {\n              languageCount[repo.language]++;\n            } else {\n              languageCount[repo.language] = 1;\n            }\n          }\n        });\n        const mostUsedLanguage = Object.keys(languageCount).reduce((a, b) => languageCount[a] > languageCount[b] ? a : b, '');\n        setMostUsedLanguage(mostUsedLanguage); // Update the state with the most frequently used language\n      }\n    } else {\n      alert('Please enter a GitHub username.');\n    }\n  };\n  const downloadJSON = (json, filename) => {\n    const blob = new Blob([json], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        style: {\n          padding: '16px',\n          marginTop: '16px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(GitHubRepos, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            gutterBottom: true,\n            children: [\"GitHub Repositories for \", username || '...']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Enter GitHub Username\",\n            value: username,\n            onChange: e => setUsername(e.target.value),\n            variant: \"outlined\",\n            fullWidth: true,\n            margin: \"normal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            justifyContent: \"center\",\n            style: {\n              marginBottom: '16px'\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: GenerateAnalysis,\n                children: \"Fetch user and repository information!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            justifyContent: \"center\",\n            style: {\n              marginBottom: '16px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: () => downloadJSON(userDataJSON, `${username}_data.json`),\n                disabled: !userDataJSON,\n                children: \"Download User Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"secondary\",\n                onClick: () => downloadJSON(JSON.stringify(publicrepos, null, 2), `${username}_repos.json`),\n                disabled: publicrepos.length === 0,\n                children: \"Download Repositories Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            width: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Original Data User JSON:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              style: {\n                whiteSpace: 'pre-wrap',\n                wordWrap: 'break-word',\n                backgroundColor: '#f5f5f5',\n                padding: '10px',\n                borderRadius: '4px'\n              },\n              children: userDataJSON\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            width: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Combined Info JSON:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              style: {\n                whiteSpace: 'pre-wrap',\n                wordWrap: 'break-word',\n                backgroundColor: '#f5f5f5',\n                padding: '10px',\n                borderRadius: '4px'\n              },\n              children: combinedInfoJSON\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            width: \"100%\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Most Frequently Used Language:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: mostUsedLanguage || 'Not Available'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(UserInfo, {\n            user: user,\n            timeOnGitHub: timeOnGitHub,\n            activeLevel: activeLevel,\n            userValueToGitHub: userValueToGitHub\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RepoList, {\n            publicrepos: publicrepos\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n}\n_s(GitHub, \"/uvwF7R5IGJywzgb7b4hleufC8U=\");\n_c = GitHub;\nvar _c;\n$RefreshReg$(_c, \"GitHub\");","map":{"version":3,"names":["React","useState","ThemeProvider","createTheme","Container","Paper","Box","Button","TextField","Typography","Grid","fetchUserData","fetchPublicRepoData","UserInfo","RepoList","GitHubRepos","jsxDEV","_jsxDEV","theme","palette","primary","main","secondary","GitHub","_s","username","setUsername","user","setUser","login","html_url","name","company","location","bio","public_repos","followers","following","created_at","updated_at","email","hireable","publicrepos","setPublicrepos","userDataJSON","setUserDataJSON","combinedInfoJSON","setCombinedInfoJSON","timeOnGitHub","setTimeOnGitHub","activeLevel","setActiveLevel","userValueToGitHub","setUserValueToGitHub","mostUsedLanguage","setMostUsedLanguage","calculateTimeOnGitHub","createdAt","currentDate","Date","createdDate","timeDiff","getTime","daysOnGitHub","Math","floor","calculateActiveLevel","updatedAt","updatedDate","daysSinceLastUpdate","calculateUserValueToGitHub","publicRepos","weightFollowers","weightPublicRepos","userValue","thresholdGood","category","value","GenerateAnalysis","trim","dataUser","JSON","stringify","filteredUser","additionalInfo","combinedInfo","dataPublic","languageCount","forEach","repo","language","Object","keys","reduce","a","b","alert","downloadJSON","json","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","children","maxWidth","elevation","style","padding","marginTop","display","flexDirection","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","variant","gutterBottom","label","onChange","e","target","fullWidth","margin","container","spacing","justifyContent","marginBottom","item","color","onClick","disabled","length","width","whiteSpace","wordWrap","backgroundColor","borderRadius","_c","$RefreshReg$"],"sources":["/Users/evewang/Desktop/UW/spring/542a portal information structures/IMT542_GitHubUserAnalysis_Xinyi(Eve)_Wang/code/src/components/github.tsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import { ThemeProvider, createTheme } from '@mui/material/styles';\n// import Container from '@mui/material/Container';\n// import Paper from '@mui/material/Paper';\n// import Box from '@mui/material/Box';\n// import Button from '@mui/material/Button';\n// import TextField from '@mui/material/TextField';\n// import Typography from '@mui/material/Typography';\n// import Grid from '@mui/material/Grid';\n// import { fetchUserData, fetchPublicRepoData } from '../functions/api';\n// // import { calculateActiveLevel, calculateTimeOnGitHub, calculateUserValueToGitHub } from '../functions/calculations';\n// import UserInfo from './UserInfo';\n// import RepoList from './RepoList';\n// import { User, PubRepo } from '../types';\n// import GitHubRepos from './graphql';\n\n// const theme = createTheme({\n//   palette: {\n//     primary: {\n//       main: '#2196f3', // light blue\n//     },\n//     secondary: {\n//       main: '#f50057', // pink for secondary\n//     },\n//   },\n// });\n\n// export default function GitHub() {\n//   const [username, setUsername] = useState<string>('');\n//   const [user, setUser] = useState<User>({\n//     login: '',\n//     html_url: '',\n//     name: null,\n//     company: null,\n//     location: null,\n//     bio: null,\n//     public_repos: 0,\n//     followers: 0,\n//     following: 0,\n//     created_at: '',\n//     updated_at: '',\n//     email: '', \n//     hireable: null\n//   });\n//   const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n//   const [userDataJSON, setUserDataJSON] = useState<string>('');\n//   const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>('');\n\n//   const [timeOnGitHub, setTimeOnGitHub] = useState<string>('');\n//   const [activeLevel, setActiveLevel] = useState<string>('');\n//   const [userValueToGitHub, setUserValueToGitHub] = useState<{ category: string, value: number } | null>(null);\n\n//   //time of the user on github\n// const calculateTimeOnGitHub = (createdAt: string): string => {\n//   const currentDate = new Date();\n//   const createdDate = new Date(createdAt);\n//   const timeDiff = currentDate.getTime() - createdDate.getTime();\n//   const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//   return `${daysOnGitHub} days`;\n// };\n\n// //the active level of the user based on the last updated time and current time\n// const calculateActiveLevel = (updatedAt: string): string => {\n//   const currentDate = new Date();\n//   const updatedDate = new Date(updatedAt);\n//   const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//   const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//   if (daysSinceLastUpdate <= 30) {\n//     return \"Very Active\";\n//   } else if (daysSinceLastUpdate <= 90) {\n//     return \"Relatively Active\";\n//   } else if (daysSinceLastUpdate <= 365) {\n//     return \"Not Very Active\";\n//   } else {\n//     return \"Not Active\";\n//   }\n// };\n\n// //calcualte the user's programming skill level based on number of followers and number of public repos with different importance in weight\n// const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//   // Define weights for followers and public repos\n//   const weightFollowers = 0.6;\n//   const weightPublicRepos = 0.4;\n\n//   // Calculate the weighted value\n//   const userValue = (followers * weightFollowers) + (publicRepos * weightPublicRepos);\n\n//   // Define threshold for categories\n//   const thresholdGood = 100;\n\n//   let category = \"\";\n//   if (userValue < thresholdGood) {\n//     category = \"Relatively good user value\";\n//   } else if (userValue < 2 * thresholdGood) {\n//     category = \"Okay user value\";\n//   } else {\n//     category = \"Great user value\";\n//   }\n\n//   return { category, value: userValue };\n// };\n\n// const GenerateAnalysis = async () => {\n//     //fetch the user's info with the username\n//     if (username.trim() !== '') {\n\n//       //1.generate user analysis\n//       const dataUser = await fetchUserData(username);\n//       if (dataUser) {\n//         setUser(dataUser);\n//         setUserDataJSON(JSON.stringify(dataUser, null, 2));\n        \n//         //retrieve the data fileds we need from the original raw json data\n//         const filteredUser = {\n//           login: dataUser.login,\n//           html_url: dataUser.html_url,\n//           name: dataUser.name,\n//           company: dataUser.company,\n//           location: dataUser.location,\n//           bio: dataUser.bio,\n//           public_repos: dataUser.public_repos,\n//           followers: dataUser.followers,\n//           following: dataUser.following,\n//           created_at: dataUser.created_at,\n//           updated_at: dataUser.updated_at,\n//           email: dataUser.email,\n//           hireable: dataUser.hireable\n//         };\n\n//         //provide input values for the data manipulation, and generate new data insights\n//         const additionalInfo = {\n//           timeOnGitHub: calculateTimeOnGitHub(dataUser.created_at),\n//           activeLevel: calculateActiveLevel(dataUser.updated_at),\n//           userValueToGitHub: calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos)\n//         };\n\n//         //update the state with the newly generated data\n//         setTimeOnGitHub(additionalInfo.timeOnGitHub);\n//         setActiveLevel(additionalInfo.activeLevel);\n//         setUserValueToGitHub(additionalInfo.userValueToGitHub);\n\n//         //combine the filtered data and the newly generated data\n//         const combinedInfo = {\n//           ...filteredUser,\n//           ...additionalInfo\n//         };\n\n//         //update the state for the new information structure\n//         setCombinedInfoJSON(JSON.stringify(combinedInfo, null, 2));\n//       }\n\n//       //2. generate user repo analysis\n//       const dataPublic = await fetchPublicRepoData(username);\n//       if (dataPublic) {\n//         setPublicrepos(dataPublic);\n\n\n//       }\n//     } else {\n//       alert('Please enter a GitHub username.');\n//     }\n//   };\n\n//   //set the download button for the user info and the user repo info\n//   const downloadJSON = (json: string, filename: string) => {\n//     const blob = new Blob([json], { type: 'application/json' });\n//     const url = URL.createObjectURL(blob);\n//     const link = document.createElement('a');\n//     link.href = url;\n//     link.download = filename;\n//     document.body.appendChild(link);\n//     link.click();\n//     document.body.removeChild(link);\n//     URL.revokeObjectURL(url);\n//   };\n\n//   return (\n//     <ThemeProvider theme={theme}>\n//       <Container maxWidth=\"md\">\n//         <Paper elevation={3} style={{ padding: '16px', marginTop: '16px' }}>\n//           <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n//             <GitHubRepos/>\n//             <Typography variant=\"h4\" gutterBottom>\n//               GitHub Repositories for {username || '...'}\n//             </Typography>\n//             <TextField\n//               label=\"Enter GitHub Username\"\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//             />\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={GenerateAnalysis}\n//                 >\n//                   Fetch user and repository information!\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"primary\"\n//                   onClick={() => downloadJSON(userDataJSON, `${username}_data.json`)}\n//                   disabled={!userDataJSON}\n//                 >\n//                   Download User Data\n//                 </Button>\n//               </Grid>\n//               <Grid item>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"secondary\"\n//                   onClick={() => downloadJSON(JSON.stringify(publicrepos, null, 2), `${username}_repos.json`)}\n//                   disabled={publicrepos.length === 0}\n//                 >\n//                   Download Repositories Data\n//                 </Button>\n//               </Grid>\n//             </Grid>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Original Data User JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {userDataJSON}\n//               </pre>\n//             </Box>\n//             <Box width=\"100%\">\n//               <Typography variant=\"h6\" gutterBottom>\n//                 Combined Info JSON:\n//               </Typography>\n//               <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n//                 {combinedInfoJSON}\n//               </pre>\n//             </Box>\n//             <UserInfo user={user} timeOnGitHub={timeOnGitHub} activeLevel={activeLevel} userValueToGitHub={userValueToGitHub} />\n//             <RepoList publicrepos={publicrepos} />\n//           </Box>\n//         </Paper>\n//       </Container>\n//     </ThemeProvider>\n//   );\n// }\n\nimport React, { useState } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { fetchUserData, fetchPublicRepoData } from '../functions/api';\nimport UserInfo from './UserInfo';\nimport RepoList from './RepoList';\nimport { User, PubRepo } from '../types';\nimport GitHubRepos from './graphql';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#2196f3', // light blue\n    },\n    secondary: {\n      main: '#f50057', // pink for secondary\n    },\n  },\n});\n\nexport default function GitHub() {\n  const [username, setUsername] = useState<string>('');\n  const [user, setUser] = useState<User>({\n    login: '',\n    html_url: '',\n    name: null,\n    company: null,\n    location: null,\n    bio: null,\n    public_repos: 0,\n    followers: 0,\n    following: 0,\n    created_at: '',\n    updated_at: '',\n    email: '', \n    hireable: null\n  });\n  const [publicrepos, setPublicrepos] = useState<PubRepo[]>([]);\n  const [userDataJSON, setUserDataJSON] = useState<string>('');\n  const [combinedInfoJSON, setCombinedInfoJSON] = useState<string>('');\n  const [timeOnGitHub, setTimeOnGitHub] = useState<string>('');\n  const [activeLevel, setActiveLevel] = useState<string>('');\n  const [userValueToGitHub, setUserValueToGitHub] = useState<{ category: string, value: number } | null>(null);\n  const [mostUsedLanguage, setMostUsedLanguage] = useState<string>('');\n\n  const calculateTimeOnGitHub = (createdAt: string): string => {\n    const currentDate = new Date();\n    const createdDate = new Date(createdAt);\n    const timeDiff = currentDate.getTime() - createdDate.getTime();\n    const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n    return `${daysOnGitHub} days`;\n  };\n\n  const calculateActiveLevel = (updatedAt: string): string => {\n    const currentDate = new Date();\n    const updatedDate = new Date(updatedAt);\n    const timeDiff = currentDate.getTime() - updatedDate.getTime();\n    const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n    if (daysSinceLastUpdate <= 30) {\n      return \"Very Active\";\n    } else if (daysSinceLastUpdate <= 90) {\n      return \"Relatively Active\";\n    } else if (daysSinceLastUpdate <= 365) {\n      return \"Not Very Active\";\n    } else {\n      return \"Not Active\";\n    }\n  };\n\n  const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n    const weightFollowers = 0.6;\n    const weightPublicRepos = 0.4;\n    const userValue = (followers * weightFollowers) + (publicRepos * weightPublicRepos);\n    const thresholdGood = 100;\n\n    let category = \"\";\n    if (userValue < thresholdGood) {\n      category = \"Relatively good user value\";\n    } else if (userValue < 2 * thresholdGood) {\n      category = \"Okay user value\";\n    } else {\n      category = \"Great user value\";\n    }\n\n    return { category, value: userValue };\n  };\n\n  const GenerateAnalysis = async () => {\n    if (username.trim() !== '') {\n      const dataUser = await fetchUserData(username);\n      if (dataUser) {\n        setUser(dataUser);\n        setUserDataJSON(JSON.stringify(dataUser, null, 2));\n\n        const filteredUser = {\n          login: dataUser.login,\n          html_url: dataUser.html_url,\n          name: dataUser.name,\n          company: dataUser.company,\n          location: dataUser.location,\n          bio: dataUser.bio,\n          public_repos: dataUser.public_repos,\n          followers: dataUser.followers,\n          following: dataUser.following,\n          created_at: dataUser.created_at,\n          updated_at: dataUser.updated_at,\n          email: dataUser.email,\n          hireable: dataUser.hireable\n        };\n\n        const additionalInfo = {\n          timeOnGitHub: calculateTimeOnGitHub(dataUser.created_at),\n          activeLevel: calculateActiveLevel(dataUser.updated_at),\n          userValueToGitHub: calculateUserValueToGitHub(dataUser.followers, dataUser.public_repos)\n        };\n\n        setTimeOnGitHub(additionalInfo.timeOnGitHub);\n        setActiveLevel(additionalInfo.activeLevel);\n        setUserValueToGitHub(additionalInfo.userValueToGitHub);\n\n        const combinedInfo = {\n          ...filteredUser,\n          ...additionalInfo\n        };\n\n        setCombinedInfoJSON(JSON.stringify(combinedInfo, null, 2));\n      }\n\n      const dataPublic = await fetchPublicRepoData(username);\n      if (dataPublic) {\n        setPublicrepos(dataPublic);\n\n        // Analyze the most frequently used language\n        const languageCount: { [key: string]: number } = {};\n        dataPublic.forEach(repo => {\n          if (repo.language) {\n            if (languageCount[repo.language]) {\n              languageCount[repo.language]++;\n            } else {\n              languageCount[repo.language] = 1;\n            }\n          }\n        });\n\n        const mostUsedLanguage = Object.keys(languageCount).reduce((a, b) => languageCount[a] > languageCount[b] ? a : b, '');\n        setMostUsedLanguage(mostUsedLanguage); // Update the state with the most frequently used language\n      }\n    } else {\n      alert('Please enter a GitHub username.');\n    }\n  };\n\n  const downloadJSON = (json: string, filename: string) => {\n    const blob = new Blob([json], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"md\">\n        <Paper elevation={3} style={{ padding: '16px', marginTop: '16px' }}>\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n            <GitHubRepos/>\n            <Typography variant=\"h4\" gutterBottom>\n              GitHub Repositories for {username || '...'}\n            </Typography>\n            <TextField\n              label=\"Enter GitHub Username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              variant=\"outlined\"\n              fullWidth\n              margin=\"normal\"\n            />\n            <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={GenerateAnalysis}\n                >\n                  Fetch user and repository information!\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid container spacing={2} justifyContent=\"center\" style={{ marginBottom: '16px' }}>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => downloadJSON(userDataJSON, `${username}_data.json`)}\n                  disabled={!userDataJSON}\n                >\n                  Download User Data\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => downloadJSON(JSON.stringify(publicrepos, null, 2), `${username}_repos.json`)}\n                  disabled={publicrepos.length === 0}\n                >\n                  Download Repositories Data\n                </Button>\n              </Grid>\n            </Grid>\n            <Box width=\"100%\">\n              <Typography variant=\"h6\" gutterBottom>\n                Original Data User JSON:\n              </Typography>\n              <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n                {userDataJSON}\n              </pre>\n            </Box>\n            <Box width=\"100%\">\n              <Typography variant=\"h6\" gutterBottom>\n                Combined Info JSON:\n              </Typography>\n              <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', backgroundColor: '#f5f5f5', padding: '10px', borderRadius: '4px' }}>\n                {combinedInfoJSON}\n              </pre>\n            </Box>\n            <Box width=\"100%\">\n              <Typography variant=\"h6\" gutterBottom>\n                Most Frequently Used Language:\n              </Typography>\n              <Typography variant=\"body1\">\n                {mostUsedLanguage || 'Not Available'}\n              </Typography>\n            </Box>\n            <UserInfo user={user} timeOnGitHub={timeOnGitHub} activeLevel={activeLevel} userValueToGitHub={userValueToGitHub} />\n            <RepoList publicrepos={publicrepos} />\n          </Box>\n        </Paper>\n      </Container>\n    </ThemeProvider>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}