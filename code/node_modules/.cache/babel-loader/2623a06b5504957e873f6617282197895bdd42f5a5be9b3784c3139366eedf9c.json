{"ast":null,"code":"// //time of the user on github\n// export const calculateTimeOnGitHub = (createdAt: string): string => {\n//   const currentDate = new Date();\n//   const createdDate = new Date(createdAt);\n//   const timeDiff = currentDate.getTime() - createdDate.getTime();\n//   const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//   return `${daysOnGitHub} days`;\n// };\n\n// //the active level of the user based on the last updated time and current time\n// export const calculateActiveLevel = (updatedAt: string): string => {\n//   const currentDate = new Date();\n//   const updatedDate = new Date(updatedAt);\n//   const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//   const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//   if (daysSinceLastUpdate <= 30) {\n//     return \"Very Active\";\n//   } else if (daysSinceLastUpdate <= 90) {\n//     return \"Relatively Active\";\n//   } else if (daysSinceLastUpdate <= 365) {\n//     return \"Not Very Active\";\n//   } else {\n//     return \"Not Active\";\n//   }\n// };\n\n// //calcualte the user's programming skill level based on \n// export const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//   const userValue = followers + publicRepos;\n//   const thresholdGood = 100; \n\n//   let category = \"\";\n//   if (userValue < thresholdGood) {\n//     category = \"Relatively good user value\";\n//   } else if (userValue < 2 * thresholdGood) {\n//     category = \"Okay user value\";\n//   } else {\n//     category = \"Great user value\";\n//   }\n\n//   return { category, value: userValue };\n// };","map":{"version":3,"names":[],"sources":["/Users/evewang/Desktop/UW/spring/542a portal information structures/IMT542_GitHubUserAnalysis_Xinyi(Eve)_Wang/code/src/functions/calculations.ts"],"sourcesContent":["// //time of the user on github\n// export const calculateTimeOnGitHub = (createdAt: string): string => {\n//   const currentDate = new Date();\n//   const createdDate = new Date(createdAt);\n//   const timeDiff = currentDate.getTime() - createdDate.getTime();\n//   const daysOnGitHub = Math.floor(timeDiff / (1000 * 3600 * 24));\n//   return `${daysOnGitHub} days`;\n// };\n\n// //the active level of the user based on the last updated time and current time\n// export const calculateActiveLevel = (updatedAt: string): string => {\n//   const currentDate = new Date();\n//   const updatedDate = new Date(updatedAt);\n//   const timeDiff = currentDate.getTime() - updatedDate.getTime();\n//   const daysSinceLastUpdate = Math.floor(timeDiff / (1000 * 3600 * 24));\n\n//   if (daysSinceLastUpdate <= 30) {\n//     return \"Very Active\";\n//   } else if (daysSinceLastUpdate <= 90) {\n//     return \"Relatively Active\";\n//   } else if (daysSinceLastUpdate <= 365) {\n//     return \"Not Very Active\";\n//   } else {\n//     return \"Not Active\";\n//   }\n// };\n\n// //calcualte the user's programming skill level based on \n// export const calculateUserValueToGitHub = (followers: number, publicRepos: number): { category: string, value: number } => {\n//   const userValue = followers + publicRepos;\n//   const thresholdGood = 100; \n\n//   let category = \"\";\n//   if (userValue < thresholdGood) {\n//     category = \"Relatively good user value\";\n//   } else if (userValue < 2 * thresholdGood) {\n//     category = \"Okay user value\";\n//   } else {\n//     category = \"Great user value\";\n//   }\n\n//   return { category, value: userValue };\n// };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}