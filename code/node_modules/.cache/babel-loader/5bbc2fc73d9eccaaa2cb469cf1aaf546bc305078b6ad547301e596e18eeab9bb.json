{"ast":null,"code":"import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { isBandScale } from '../internals/isBandScale';\nimport { getSVGPoint } from '../internals/utils';\nimport { useSvgRef } from './useSvgRef';\nimport { useDrawingArea } from './useDrawingArea';\nfunction getAsANumber(value) {\n  return value instanceof Date ? value.getTime() : value;\n}\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = useSvgRef();\n  const {\n    left,\n    top,\n    width,\n    height\n  } = useDrawingArea();\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n    const getUpdate = (axisConfig, mouseValue) => {\n      if (usedXAxis === null) {\n        return null;\n      }\n      const {\n        scale,\n        data: axisData,\n        reverse\n      } = axisConfig;\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n        const valueAsNumber = getAsANumber(value);\n        const closestIndex = axisData?.findIndex((pointValue, index) => {\n          const v = getAsANumber(pointValue);\n          if (v > valueAsNumber) {\n            if (index === 0 || Math.abs(valueAsNumber - v) <= Math.abs(valueAsNumber - getAsANumber(axisData[index - 1]))) {\n              return true;\n            }\n          }\n          if (v <= valueAsNumber) {\n            if (index === axisData.length - 1 || Math.abs(getAsANumber(value) - v) < Math.abs(getAsANumber(value) - getAsANumber(axisData[index + 1]))) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n      if (reverse) {\n        const reverseIndex = axisData.length - 1 - dataIndex;\n        return {\n          index: reverseIndex,\n          value: axisData[reverseIndex]\n        };\n      }\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    };\n    const handleMouseOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'exitChart'\n      });\n    };\n    const handleMouseMove = event => {\n      const svgPoint = getSVGPoint(svgRef.current, event);\n      mousePosition.current = {\n        x: svgPoint.x,\n        y: svgPoint.y\n      };\n      const outsideX = svgPoint.x < left || svgPoint.x > left + width;\n      const outsideY = svgPoint.y < top || svgPoint.y > top + height;\n      if (outsideX || outsideY) {\n        dispatch({\n          type: 'exitChart'\n        });\n        return;\n      }\n      const newStateX = getUpdate(xAxis[usedXAxis], svgPoint.x);\n      const newStateY = getUpdate(yAxis[usedYAxis], svgPoint.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n    element.addEventListener('mouseout', handleMouseOut);\n    element.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      element.removeEventListener('mouseout', handleMouseOut);\n      element.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [svgRef, dispatch, left, width, top, height, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener]);\n};","map":{"version":3,"names":["React","InteractionContext","CartesianContext","isBandScale","getSVGPoint","useSvgRef","useDrawingArea","getAsANumber","value","Date","getTime","useAxisEvents","disableAxisListener","svgRef","left","top","width","height","xAxis","yAxis","xAxisIds","yAxisIds","useContext","dispatch","usedXAxis","usedYAxis","mousePosition","useRef","x","y","useEffect","element","current","getUpdate","axisConfig","mouseValue","scale","data","axisData","reverse","invert","undefined","valueAsNumber","closestIndex","findIndex","pointValue","index","v","Math","abs","length","dataIndex","bandwidth","floor","min","range","step","reverseIndex","handleMouseOut","type","handleMouseMove","event","svgPoint","outsideX","outsideY","newStateX","newStateY","addEventListener","removeEventListener"],"sources":["/Users/evewang/Desktop/Internship_prep/EviePortfolio/client/node_modules/@mui/x-charts/esm/hooks/useAxisEvents.js"],"sourcesContent":["import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { isBandScale } from '../internals/isBandScale';\nimport { getSVGPoint } from '../internals/utils';\nimport { useSvgRef } from './useSvgRef';\nimport { useDrawingArea } from './useDrawingArea';\nfunction getAsANumber(value) {\n  return value instanceof Date ? value.getTime() : value;\n}\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = useSvgRef();\n  const {\n    left,\n    top,\n    width,\n    height\n  } = useDrawingArea();\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n    const getUpdate = (axisConfig, mouseValue) => {\n      if (usedXAxis === null) {\n        return null;\n      }\n      const {\n        scale,\n        data: axisData,\n        reverse\n      } = axisConfig;\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n        const valueAsNumber = getAsANumber(value);\n        const closestIndex = axisData?.findIndex((pointValue, index) => {\n          const v = getAsANumber(pointValue);\n          if (v > valueAsNumber) {\n            if (index === 0 || Math.abs(valueAsNumber - v) <= Math.abs(valueAsNumber - getAsANumber(axisData[index - 1]))) {\n              return true;\n            }\n          }\n          if (v <= valueAsNumber) {\n            if (index === axisData.length - 1 || Math.abs(getAsANumber(value) - v) < Math.abs(getAsANumber(value) - getAsANumber(axisData[index + 1]))) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n      if (reverse) {\n        const reverseIndex = axisData.length - 1 - dataIndex;\n        return {\n          index: reverseIndex,\n          value: axisData[reverseIndex]\n        };\n      }\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    };\n    const handleMouseOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'exitChart'\n      });\n    };\n    const handleMouseMove = event => {\n      const svgPoint = getSVGPoint(svgRef.current, event);\n      mousePosition.current = {\n        x: svgPoint.x,\n        y: svgPoint.y\n      };\n      const outsideX = svgPoint.x < left || svgPoint.x > left + width;\n      const outsideY = svgPoint.y < top || svgPoint.y > top + height;\n      if (outsideX || outsideY) {\n        dispatch({\n          type: 'exitChart'\n        });\n        return;\n      }\n      const newStateX = getUpdate(xAxis[usedXAxis], svgPoint.x);\n      const newStateY = getUpdate(yAxis[usedYAxis], svgPoint.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n    element.addEventListener('mouseout', handleMouseOut);\n    element.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      element.removeEventListener('mouseout', handleMouseOut);\n      element.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [svgRef, dispatch, left, width, top, height, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}